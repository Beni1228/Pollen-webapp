(function($) {
  var $event = $.event,
    $special, resizeTimeout;
  $special = $event.special.debouncedresize = {
    setup: function() {
      $(this).on("resize", $special.handler);
    },
    teardown: function() {
      $(this).off("resize", $special.handler);
    },
    handler: function(event, execAsap) {
      var context = this,
        args = arguments,
        dispatch = function() {
          event.type = "debouncedresize";
          $event.dispatch.apply(context, args);
        };
      if (resizeTimeout) {
        clearTimeout(resizeTimeout);
      }
      execAsap ? dispatch() : resizeTimeout = setTimeout(dispatch, $special.threshold);
    },
    threshold: 150
  };
})(jQuery);; /*!fancyBox v2.1.5 fancyapps.com | fancyapps.com/fancybox/#license*/
(function(r, G, f, v) {
  var J = f("html"),
    n = f(r),
    p = f(G),
    b = f.fancybox = function() {
      b.open.apply(this, arguments)
    },
    I = navigator.userAgent.match(/msie/i),
    B = null,
    s = G.createTouch !== v,
    t = function(a) {
      return a && a.hasOwnProperty && a instanceof f
    },
    q = function(a) {
      return a && "string" === f.type(a)
    },
    E = function(a) {
      return q(a) && 0 < a.indexOf("%")
    },
    l = function(a, d) {
      var e = parseInt(a, 10) || 0;
      d && E(a) && (e *= b.getViewport()[d] / 100);
      return Math.ceil(e)
    },
    w = function(a, b) {
      return l(a, b) + "px"
    };
  f.extend(b, {
    version: "2.1.5",
    defaults: {
      padding: 15,
      margin: 20,
      width: 800,
      height: 600,
      minWidth: 100,
      minHeight: 100,
      maxWidth: 9999,
      maxHeight: 9999,
      pixelRatio: 1,
      autoSize: !0,
      autoHeight: !1,
      autoWidth: !1,
      autoResize: !0,
      autoCenter: !s,
      fitToView: !0,
      aspectRatio: !1,
      topRatio: 0.5,
      leftRatio: 0.5,
      scrolling: "auto",
      wrapCSS: "",
      arrows: !0,
      closeBtn: !0,
      closeClick: !1,
      nextClick: !1,
      mouseWheel: !0,
      autoPlay: !1,
      playSpeed: 3E3,
      preload: 3,
      modal: !1,
      loop: !0,
      ajax: {
        dataType: "html",
        headers: {
          "X-fancyBox": !0
        }
      },
      iframe: {
        scrolling: "auto",
        preload: !0
      },
      swf: {
        wmode: "transparent",
        allowfullscreen: "true",
        allowscriptaccess: "always"
      },
      keys: {
        next: {
          13: "left",
          34: "up",
          39: "left",
          40: "up"
        },
        prev: {
          8: "right",
          33: "down",
          37: "right",
          38: "down"
        },
        close: [27],
        play: [32],
        toggle: [70]
      },
      direction: {
        next: "left",
        prev: "right"
      },
      scrollOutside: !0,
      index: 0,
      type: null,
      href: null,
      content: null,
      title: null,
      tpl: {
        wrap: '<div class="fancybox-wrap" tabIndex="-1"><div class="fancybox-skin"><div class="fancybox-outer"><div class="fancybox-inner"></div></div></div></div>',
        image: '<img class="fancybox-image" src="{href}" alt="" />',
        iframe: '<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen' +
          (I ? ' allowtransparency="true"' : "") + "></iframe>",
        error: '<p class="fancybox-error">The requested content cannot be loaded.<br/>Please try again later.</p>',
        closeBtn: '<a title="Close" class="fancybox-item fancybox-close" href="javascript:;"></a>',
        next: '<a title="Next" class="fancybox-nav fancybox-next" href="javascript:;"><span></span></a>',
        prev: '<a title="Previous" class="fancybox-nav fancybox-prev" href="javascript:;"><span></span></a>'
      },
      openEffect: "fade",
      openSpeed: 250,
      openEasing: "swing",
      openOpacity: !0,
      openMethod: "zoomIn",
      closeEffect: "fade",
      closeSpeed: 250,
      closeEasing: "swing",
      closeOpacity: !0,
      closeMethod: "zoomOut",
      nextEffect: "elastic",
      nextSpeed: 250,
      nextEasing: "swing",
      nextMethod: "changeIn",
      prevEffect: "elastic",
      prevSpeed: 250,
      prevEasing: "swing",
      prevMethod: "changeOut",
      helpers: {
        overlay: !0,
        title: !0
      },
      onCancel: f.noop,
      beforeLoad: f.noop,
      afterLoad: f.noop,
      beforeShow: f.noop,
      afterShow: f.noop,
      beforeChange: f.noop,
      beforeClose: f.noop,
      afterClose: f.noop
    },
    group: {},
    opts: {},
    previous: null,
    coming: null,
    current: null,
    isActive: !1,
    isOpen: !1,
    isOpened: !1,
    wrap: null,
    skin: null,
    outer: null,
    inner: null,
    player: {
      timer: null,
      isActive: !1
    },
    ajaxLoad: null,
    imgPreload: null,
    transitions: {},
    helpers: {},
    open: function(a, d) {
      if (a && (f.isPlainObject(d) || (d = {}), !1 !== b.close(!0))) return f.isArray(a) || (a = t(a) ? f(a).get() : [a]), f.each(a, function(e, c) {
        var k = {},
          g, h, j, m, l;
        "object" === f.type(c) && (c.nodeType && (c = f(c)), t(c) ? (k = {
          href: c.data("fancybox-href") || c.attr("href"),
          title: c.data("fancybox-title") || c.attr("title"),
          isDom: !0,
          element: c
        }, f.metadata && f.extend(!0, k, c.metadata())) : k = c);
        g = d.href || k.href || (q(c) ? c : null);
        h = d.title !== v ? d.title : k.title || "";
        m = (j = d.content || k.content) ? "html" : d.type || k.type;
        !m && k.isDom && (m = c.data("fancybox-type"), m || (m = (m = c.prop("class").match(/fancybox\.(\w+)/)) ? m[1] : null));
        q(g) && (m || (b.isImage(g) ? m = "image" : b.isSWF(g) ? m = "swf" : "#" === g.charAt(0) ? m = "inline" : q(c) && (m = "html", j = c)), "ajax" === m && (l = g.split(/\s+/, 2), g = l.shift(), l = l.shift()));
        j || ("inline" === m ? g ? j = f(q(g) ? g.replace(/.*(?=#[^\s]+$)/, "") : g) : k.isDom && (j = c) : "html" === m ? j = g : !m && (!g && k.isDom) && (m = "inline", j = c));
        f.extend(k, {
          href: g,
          type: m,
          content: j,
          title: h,
          selector: l
        });
        a[e] = k
      }), b.opts = f.extend(!0, {}, b.defaults, d), d.keys !== v && (b.opts.keys = d.keys ? f.extend({}, b.defaults.keys, d.keys) : !1), b.group = a, b._start(b.opts.index)
    },
    cancel: function() {
      var a = b.coming;
      a && !1 !== b.trigger("onCancel") && (b.hideLoading(), b.ajaxLoad && b.ajaxLoad.abort(), b.ajaxLoad = null, b.imgPreload && (b.imgPreload.onload = b.imgPreload.onerror = null), a.wrap && a.wrap.stop(!0, !0).trigger("onReset").remove(), b.coming = null, b.current || b._afterZoomOut(a))
    },
    close: function(a) {
      b.cancel();
      !1 !== b.trigger("beforeClose") && (b.unbindEvents(), b.isActive && (!b.isOpen || !0 === a ? (f(".fancybox-wrap").stop(!0).trigger("onReset").remove(), b._afterZoomOut()) : (b.isOpen = b.isOpened = !1, b.isClosing = !0, f(".fancybox-item, .fancybox-nav").remove(), b.wrap.stop(!0, !0).removeClass("fancybox-opened"), b.transitions[b.current.closeMethod]())))
    },
    play: function(a) {
      var d = function() {
          clearTimeout(b.player.timer)
        },
        e = function() {
          d();
          b.current && b.player.isActive && (b.player.timer = setTimeout(b.next, b.current.playSpeed))
        },
        c = function() {
          d();
          p.unbind(".player");
          b.player.isActive = !1;
          b.trigger("onPlayEnd")
        };
      if (!0 === a || !b.player.isActive && !1 !== a) {
        if (b.current && (b.current.loop || b.current.index < b.group.length - 1)) b.player.isActive = !0, p.bind({
          "onCancel.player beforeClose.player": c,
          "onUpdate.player": e,
          "beforeLoad.player": d
        }), e(), b.trigger("onPlayStart")
      } else c()
    },
    next: function(a) {
      var d = b.current;
      d && (q(a) || (a = d.direction.next), b.jumpto(d.index + 1, a, "next"))
    },
    prev: function(a) {
      var d = b.current;
      d && (q(a) || (a = d.direction.prev), b.jumpto(d.index - 1, a, "prev"))
    },
    jumpto: function(a, d, e) {
      var c = b.current;
      c && (a = l(a), b.direction = d || c.direction[a >= c.index ? "next" : "prev"], b.router = e || "jumpto", c.loop && (0 > a && (a = c.group.length + a % c.group.length), a %= c.group.length), c.group[a] !== v && (b.cancel(), b._start(a)))
    },
    reposition: function(a, d) {
      var e = b.current,
        c = e ? e.wrap : null,
        k;
      c && (k = b._getPosition(d), a && "scroll" === a.type ? (delete k.position, c.stop(!0, !0).animate(k, 200)) : (c.css(k), e.pos = f.extend({}, e.dim, k)))
    },
    update: function(a) {
      var d = a && a.type,
        e = !d || "orientationchange" === d;
      e && (clearTimeout(B), B = null);
      b.isOpen && !B && (B = setTimeout(function() {
        var c = b.current;
        c && !b.isClosing && (b.wrap.removeClass("fancybox-tmp"), (e || "load" === d || "resize" === d && c.autoResize) && b._setDimension(), "scroll" === d && c.canShrink || b.reposition(a), b.trigger("onUpdate"), B = null)
      }, e && !s ? 0 : 300))
    },
    toggle: function(a) {
      b.isOpen && (b.current.fitToView = "boolean" === f.type(a) ? a : !b.current.fitToView, s && (b.wrap.removeAttr("style").addClass("fancybox-tmp"), b.trigger("onUpdate")), b.update())
    },
    hideLoading: function() {
      p.unbind(".loading");
      f("#fancybox-loading").remove()
    },
    showLoading: function() {
      var a, d;
      b.hideLoading();
      a = f('<div id="fancybox-loading"><div></div></div>').click(b.cancel).appendTo("body");
      p.bind("keydown.loading", function(a) {
        if (27 === (a.which || a.keyCode)) a.preventDefault(), b.cancel()
      });
      b.defaults.fixed || (d = b.getViewport(), a.css({
        position: "absolute",
        top: 0.5 * d.h + d.y,
        left: 0.5 * d.w + d.x
      }))
    },
    getViewport: function() {
      var a = b.current && b.current.locked || !1,
        d = {
          x: n.scrollLeft(),
          y: n.scrollTop()
        };
      a ? (d.w = a[0].clientWidth, d.h = a[0].clientHeight) : (d.w = s && r.innerWidth ? r.innerWidth : n.width(), d.h = s && r.innerHeight ? r.innerHeight : n.height());
      return d
    },
    unbindEvents: function() {
      b.wrap && t(b.wrap) && b.wrap.unbind(".fb");
      p.unbind(".fb");
      n.unbind(".fb")
    },
    bindEvents: function() {
      var a = b.current,
        d;
      a && (n.bind("orientationchange.fb" + (s ? "" : " resize.fb") + (a.autoCenter && !a.locked ? " scroll.fb" : ""), b.update), (d = a.keys) && p.bind("keydown.fb", function(e) {
        var c = e.which || e.keyCode,
          k = e.target || e.srcElement;
        if (27 === c && b.coming) return !1;
        !e.ctrlKey && (!e.altKey && !e.shiftKey && !e.metaKey && (!k || !k.type && !f(k).is("[contenteditable]"))) && f.each(d, function(d, k) {
          if (1 < a.group.length && k[c] !== v) return b[d](k[c]), e.preventDefault(), !1;
          if (-1 < f.inArray(c, k)) return b[d](), e.preventDefault(), !1
        })
      }), f.fn.mousewheel && a.mouseWheel && b.wrap.bind("mousewheel.fb", function(d, c, k, g) {
        for (var h = f(d.target || null), j = !1; h.length && !j && !h.is(".fancybox-skin") && !h.is(".fancybox-wrap");) j = h[0] && !(h[0].style.overflow && "hidden" === h[0].style.overflow) && (h[0].clientWidth && h[0].scrollWidth > h[0].clientWidth || h[0].clientHeight && h[0].scrollHeight > h[0].clientHeight), h = f(h).parent();
        if (0 !== c && !j && 1 < b.group.length && !a.canShrink) {
          if (0 < g || 0 < k) b.prev(0 < g ? "down" : "left");
          else if (0 > g || 0 > k) b.next(0 > g ? "up" : "right");
          d.preventDefault()
        }
      }))
    },
    trigger: function(a, d) {
      var e, c = d || b.coming || b.current;
      if (c) {
        f.isFunction(c[a]) && (e = c[a].apply(c, Array.prototype.slice.call(arguments, 1)));
        if (!1 === e) return !1;
        c.helpers && f.each(c.helpers, function(d, e) {
          if (e && b.helpers[d] && f.isFunction(b.helpers[d][a])) b.helpers[d][a](f.extend(!0, {}, b.helpers[d].defaults, e), c)
        });
        p.trigger(a)
      }
    },
    isImage: function(a) {
      return q(a) && a.match(/(^data:image\/.*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg)((\?|#).*)?$)/i)
    },
    isSWF: function(a) {
      return q(a) && a.match(/\.(swf)((\?|#).*)?$/i)
    },
    _start: function(a) {
      var d = {},
        e, c;
      a = l(a);
      e = b.group[a] || null;
      if (!e) return !1;
      d = f.extend(!0, {}, b.opts, e);
      e = d.margin;
      c = d.padding;
      "number" === f.type(e) && (d.margin = [e, e, e, e]);
      "number" === f.type(c) && (d.padding = [c, c, c, c]);
      d.modal && f.extend(!0, d, {
        closeBtn: !1,
        closeClick: !1,
        nextClick: !1,
        arrows: !1,
        mouseWheel: !1,
        keys: null,
        helpers: {
          overlay: {
            closeClick: !1
          }
        }
      });
      d.autoSize && (d.autoWidth = d.autoHeight = !0);
      "auto" === d.width && (d.autoWidth = !0);
      "auto" === d.height && (d.autoHeight = !0);
      d.group = b.group;
      d.index = a;
      b.coming = d;
      if (!1 === b.trigger("beforeLoad")) b.coming = null;
      else {
        c = d.type;
        e = d.href;
        if (!c) return b.coming = null, b.current && b.router && "jumpto" !== b.router ? (b.current.index = a, b[b.router](b.direction)) : !1;
        b.isActive = !0;
        if ("image" === c || "swf" === c) d.autoHeight = d.autoWidth = !1, d.scrolling = "visible";
        "image" === c && (d.aspectRatio = !0);
        "iframe" === c && s && (d.scrolling = "scroll");
        d.wrap = f(d.tpl.wrap).addClass("fancybox-" + (s ? "mobile" : "desktop") + " fancybox-type-" + c + " fancybox-tmp " + d.wrapCSS).appendTo(d.parent || "body");
        f.extend(d, {
          skin: f(".fancybox-skin", d.wrap),
          outer: f(".fancybox-outer", d.wrap),
          inner: f(".fancybox-inner", d.wrap)
        });
        f.each(["Top", "Right", "Bottom", "Left"], function(a, b) {
          d.skin.css("padding" + b, w(d.padding[a]))
        });
        b.trigger("onReady");
        if ("inline" === c || "html" === c) {
          if (!d.content || !d.content.length) return b._error("content")
        } else if (!e) return b._error("href");
        "image" === c ? b._loadImage() : "ajax" === c ? b._loadAjax() : "iframe" === c ? b._loadIframe() : b._afterLoad()
      }
    },
    _error: function(a) {
      f.extend(b.coming, {
        type: "html",
        autoWidth: !0,
        autoHeight: !0,
        minWidth: 0,
        minHeight: 0,
        scrolling: "no",
        hasError: a,
        content: b.coming.tpl.error
      });
      b._afterLoad()
    },
    _loadImage: function() {
      var a = b.imgPreload = new Image;
      a.onload = function() {
        this.onload = this.onerror = null;
        b.coming.width = this.width / b.opts.pixelRatio;
        b.coming.height = this.height / b.opts.pixelRatio;
        b._afterLoad()
      };
      a.onerror = function() {
        this.onload = this.onerror = null;
        b._error("image")
      };
      a.src = b.coming.href;
      !0 !== a.complete && b.showLoading()
    },
    _loadAjax: function() {
      var a = b.coming;
      b.showLoading();
      b.ajaxLoad = f.ajax(f.extend({}, a.ajax, {
        url: a.href,
        error: function(a, e) {
          b.coming && "abort" !== e ? b._error("ajax", a) : b.hideLoading()
        },
        success: function(d, e) {
          "success" === e && (a.content = d, b._afterLoad())
        }
      }))
    },
    _loadIframe: function() {
      var a = b.coming,
        d = f(a.tpl.iframe.replace(/\{rnd\}/g, (new Date).getTime())).attr("scrolling", s ? "auto" : a.iframe.scrolling).attr("src", a.href);
      f(a.wrap).bind("onReset", function() {
        try {
          f(this).find("iframe").hide().attr("src", "//about:blank").end().empty()
        } catch (a) {}
      });
      a.iframe.preload && (b.showLoading(), d.one("load", function() {
        f(this).data("ready", 1);
        s || f(this).bind("load.fb", b.update);
        f(this).parents(".fancybox-wrap").width("100%").removeClass("fancybox-tmp").show();
        b._afterLoad()
      }));
      a.content = d.appendTo(a.inner);
      a.iframe.preload || b._afterLoad()
    },
    _preloadImages: function() {
      var a = b.group,
        d = b.current,
        e = a.length,
        c = d.preload ? Math.min(d.preload, e - 1) : 0,
        f, g;
      for (g = 1; g <= c; g += 1) f = a[(d.index + g) % e], "image" === f.type && f.href && ((new Image).src = f.href)
    },
    _afterLoad: function() {
      var a = b.coming,
        d = b.current,
        e, c, k, g, h;
      b.hideLoading();
      if (a && !1 !== b.isActive)
        if (!1 === b.trigger("afterLoad", a, d)) a.wrap.stop(!0).trigger("onReset").remove(), b.coming = null;
        else {
          d && (b.trigger("beforeChange", d), d.wrap.stop(!0).removeClass("fancybox-opened").find(".fancybox-item, .fancybox-nav").remove());
          b.unbindEvents();
          e = a.content;
          c = a.type;
          k = a.scrolling;
          f.extend(b, {
            wrap: a.wrap,
            skin: a.skin,
            outer: a.outer,
            inner: a.inner,
            current: a,
            previous: d
          });
          g = a.href;
          switch (c) {
            case "inline":
            case "ajax":
            case "html":
              a.selector ? e = f("<div>").html(e).find(a.selector) : t(e) && (e.data("fancybox-placeholder") || e.data("fancybox-placeholder", f('<div class="fancybox-placeholder"></div>').insertAfter(e).hide()), e = e.show().detach(), a.wrap.bind("onReset", function() {
                f(this).find(e).length && e.hide().replaceAll(e.data("fancybox-placeholder")).data("fancybox-placeholder", !1)
              }));
              break;
            case "image":
              e = a.tpl.image.replace("{href}", g);
              break;
            case "swf":
              e = '<object id="fancybox-swf" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="100%" height="100%"><param name="movie" value="' + g + '"></param>', h = "", f.each(a.swf, function(a, b) {
                e += '<param name="' + a + '" value="' + b + '"></param>';
                h += " " + a + '="' + b + '"'
              }), e += '<embed src="' + g + '" type="application/x-shockwave-flash" width="100%" height="100%"' + h + "></embed></object>"
          }(!t(e) || !e.parent().is(a.inner)) && a.inner.append(e);
          b.trigger("beforeShow");
          a.inner.css("overflow", "yes" === k ? "scroll" : "no" === k ? "hidden" : k);
          b._setDimension();
          b.reposition();
          b.isOpen = !1;
          b.coming = null;
          b.bindEvents();
          if (b.isOpened) {
            if (d.prevMethod) b.transitions[d.prevMethod]()
          } else f(".fancybox-wrap").not(a.wrap).stop(!0).trigger("onReset").remove();
          b.transitions[b.isOpened ? a.nextMethod : a.openMethod]();
          b._preloadImages()
        }
    },
    _setDimension: function() {
      var a = b.getViewport(),
        d = 0,
        e = !1,
        c = !1,
        e = b.wrap,
        k = b.skin,
        g = b.inner,
        h = b.current,
        c = h.width,
        j = h.height,
        m = h.minWidth,
        u = h.minHeight,
        n = h.maxWidth,
        p = h.maxHeight,
        s = h.scrolling,
        q = h.scrollOutside ? h.scrollbarWidth : 0,
        x = h.margin,
        y = l(x[1] + x[3]),
        r = l(x[0] + x[2]),
        v, z, t, C, A, F, B, D, H;
      e.add(k).add(g).width("auto").height("auto").removeClass("fancybox-tmp");
      x = l(k.outerWidth(!0) - k.width());
      v = l(k.outerHeight(!0) - k.height());
      z = y + x;
      t = r + v;
      C = E(c) ? (a.w - z) * l(c) / 100 : c;
      A = E(j) ? (a.h - t) * l(j) / 100 : j;
      if ("iframe" === h.type) {
        if (H = h.content, h.autoHeight && 1 === H.data("ready")) try {
          H[0].contentWindow.document.location && (g.width(C).height(9999), F = H.contents().find("body"), q && F.css("overflow-x", "hidden"), A = F.outerHeight(!0))
        } catch (G) {}
      } else if (h.autoWidth || h.autoHeight) g.addClass("fancybox-tmp"), h.autoWidth || g.width(C), h.autoHeight || g.height(A), h.autoWidth && (C = g.width()), h.autoHeight && (A = g.height()), g.removeClass("fancybox-tmp");
      c = l(C);
      j = l(A);
      D = C / A;
      m = l(E(m) ? l(m, "w") - z : m);
      n = l(E(n) ? l(n, "w") - z : n);
      u = l(E(u) ? l(u, "h") - t : u);
      p = l(E(p) ? l(p, "h") - t : p);
      F = n;
      B = p;
      h.fitToView && (n = Math.min(a.w - z, n), p = Math.min(a.h - t, p));
      z = a.w - y;
      r = a.h - r;
      h.aspectRatio ? (c > n && (c = n, j = l(c / D)), j > p && (j = p, c = l(j * D)), c < m && (c = m, j = l(c / D)), j < u && (j = u, c = l(j * D))) : (c = Math.max(m, Math.min(c, n)), h.autoHeight && "iframe" !== h.type && (g.width(c), j = g.height()), j = Math.max(u, Math.min(j, p)));
      if (h.fitToView)
        if (g.width(c).height(j), e.width(c + x), a = e.width(), y = e.height(), h.aspectRatio)
          for (;
            (a > z || y > r) && (c > m && j > u) && !(19 < d++);) j = Math.max(u, Math.min(p, j - 10)), c = l(j * D), c < m && (c = m, j = l(c / D)), c > n && (c = n, j = l(c / D)), g.width(c).height(j), e.width(c + x), a = e.width(), y = e.height();
        else c = Math.max(m, Math.min(c, c - (a - z))), j = Math.max(u, Math.min(j, j - (y - r)));
      q && ("auto" === s && j < A && c + x + q < z) && (c += q);
      g.width(c).height(j);
      e.width(c + x);
      a = e.width();
      y = e.height();
      e = (a > z || y > r) && c > m && j > u;
      c = h.aspectRatio ? c < F && j < B && c < C && j < A : (c < F || j < B) && (c < C || j < A);
      f.extend(h, {
        dim: {
          width: w(a),
          height: w(y)
        },
        origWidth: C,
        origHeight: A,
        canShrink: e,
        canExpand: c,
        wPadding: x,
        hPadding: v,
        wrapSpace: y - k.outerHeight(!0),
        skinSpace: k.height() - j
      });
      !H && (h.autoHeight && j > u && j < p && !c) && g.height("auto")
    },
    _getPosition: function(a) {
      var d = b.current,
        e = b.getViewport(),
        c = d.margin,
        f = b.wrap.width() + c[1] + c[3],
        g = b.wrap.height() + c[0] + c[2],
        c = {
          position: "absolute",
          top: c[0],
          left: c[3]
        };
      d.autoCenter && d.fixed && !a && g <= e.h && f <= e.w ? c.position = "fixed" : d.locked || (c.top += e.y, c.left += e.x);
      c.top = w(Math.max(c.top, c.top + (e.h - g) * d.topRatio));
      c.left = w(Math.max(c.left, c.left + (e.w - f) * d.leftRatio));
      return c
    },
    _afterZoomIn: function() {
      var a = b.current;
      a && (b.isOpen = b.isOpened = !0, b.wrap.css("overflow", "visible").addClass("fancybox-opened"), b.update(), (a.closeClick || a.nextClick && 1 < b.group.length) && b.inner.css("cursor", "pointer").bind("click.fb", function(d) {
        !f(d.target).is("a") && !f(d.target).parent().is("a") && (d.preventDefault(), b[a.closeClick ? "close" : "next"]())
      }), a.closeBtn && f(a.tpl.closeBtn).appendTo(b.skin).bind("click.fb", function(a) {
        a.preventDefault();
        b.close()
      }), a.arrows && 1 < b.group.length && ((a.loop || 0 < a.index) && f(a.tpl.prev).appendTo(b.outer).bind("click.fb", b.prev), (a.loop || a.index < b.group.length - 1) && f(a.tpl.next).appendTo(b.outer).bind("click.fb", b.next)), b.trigger("afterShow"), !a.loop && a.index === a.group.length - 1 ? b.play(!1) : b.opts.autoPlay && !b.player.isActive && (b.opts.autoPlay = !1, b.play()))
    },
    _afterZoomOut: function(a) {
      a = a || b.current;
      f(".fancybox-wrap").trigger("onReset").remove();
      f.extend(b, {
        group: {},
        opts: {},
        router: !1,
        current: null,
        isActive: !1,
        isOpened: !1,
        isOpen: !1,
        isClosing: !1,
        wrap: null,
        skin: null,
        outer: null,
        inner: null
      });
      b.trigger("afterClose", a)
    }
  });
  b.transitions = {
    getOrigPosition: function() {
      var a = b.current,
        d = a.element,
        e = a.orig,
        c = {},
        f = 50,
        g = 50,
        h = a.hPadding,
        j = a.wPadding,
        m = b.getViewport();
      !e && (a.isDom && d.is(":visible")) && (e = d.find("img:first"), e.length || (e = d));
      t(e) ? (c = e.offset(), e.is("img") && (f = e.outerWidth(), g = e.outerHeight())) : (c.top = m.y + (m.h - g) * a.topRatio, c.left = m.x + (m.w - f) * a.leftRatio);
      if ("fixed" === b.wrap.css("position") || a.locked) c.top -= m.y, c.left -= m.x;
      return c = {
        top: w(c.top - h * a.topRatio),
        left: w(c.left - j * a.leftRatio),
        width: w(f + j),
        height: w(g + h)
      }
    },
    step: function(a, d) {
      var e, c, f = d.prop;
      c = b.current;
      var g = c.wrapSpace,
        h = c.skinSpace;
      if ("width" === f || "height" === f) e = d.end === d.start ? 1 : (a - d.start) / (d.end - d.start), b.isClosing && (e = 1 - e), c = "width" === f ? c.wPadding : c.hPadding, c = a - c, b.skin[f](l("width" === f ? c : c - g * e)), b.inner[f](l("width" === f ? c : c - g * e - h * e))
    },
    zoomIn: function() {
      var a = b.current,
        d = a.pos,
        e = a.openEffect,
        c = "elastic" === e,
        k = f.extend({
          opacity: 1
        }, d);
      delete k.position;
      c ? (d = this.getOrigPosition(), a.openOpacity && (d.opacity = 0.1)) : "fade" === e && (d.opacity = 0.1);
      b.wrap.css(d).animate(k, {
        duration: "none" === e ? 0 : a.openSpeed,
        easing: a.openEasing,
        step: c ? this.step : null,
        complete: b._afterZoomIn
      })
    },
    zoomOut: function() {
      var a = b.current,
        d = a.closeEffect,
        e = "elastic" === d,
        c = {
          opacity: 0.1
        };
      e && (c = this.getOrigPosition(), a.closeOpacity && (c.opacity = 0.1));
      b.wrap.animate(c, {
        duration: "none" === d ? 0 : a.closeSpeed,
        easing: a.closeEasing,
        step: e ? this.step : null,
        complete: b._afterZoomOut
      })
    },
    changeIn: function() {
      var a = b.current,
        d = a.nextEffect,
        e = a.pos,
        c = {
          opacity: 1
        },
        f = b.direction,
        g;
      e.opacity = 0.1;
      "elastic" === d && (g = "down" === f || "up" === f ? "top" : "left", "down" === f || "right" === f ? (e[g] = w(l(e[g]) - 200), c[g] = "+=200px") : (e[g] = w(l(e[g]) + 200), c[g] = "-=200px"));
      "none" === d ? b._afterZoomIn() : b.wrap.css(e).animate(c, {
        duration: a.nextSpeed,
        easing: a.nextEasing,
        complete: b._afterZoomIn
      })
    },
    changeOut: function() {
      var a = b.previous,
        d = a.prevEffect,
        e = {
          opacity: 0.1
        },
        c = b.direction;
      "elastic" === d && (e["down" === c || "up" === c ? "top" : "left"] = ("up" === c || "left" === c ? "-" : "+") + "=200px");
      a.wrap.animate(e, {
        duration: "none" === d ? 0 : a.prevSpeed,
        easing: a.prevEasing,
        complete: function() {
          f(this).trigger("onReset").remove()
        }
      })
    }
  };
  b.helpers.overlay = {
    defaults: {
      closeClick: !0,
      speedOut: 200,
      showEarly: !0,
      css: {},
      locked: !s,
      fixed: !0
    },
    overlay: null,
    fixed: !1,
    el: f("html"),
    create: function(a) {
      a = f.extend({}, this.defaults, a);
      this.overlay && this.close();
      this.overlay = f('<div class="fancybox-overlay"></div>').appendTo(b.coming ? b.coming.parent : a.parent);
      this.fixed = !1;
      a.fixed && b.defaults.fixed && (this.overlay.addClass("fancybox-overlay-fixed"), this.fixed = !0)
    },
    open: function(a) {
      var d = this;
      a = f.extend({}, this.defaults, a);
      this.overlay ? this.overlay.unbind(".overlay").width("auto").height("auto") : this.create(a);
      this.fixed || (n.bind("resize.overlay", f.proxy(this.update, this)), this.update());
      a.closeClick && this.overlay.bind("click.overlay", function(a) {
        if (f(a.target).hasClass("fancybox-overlay")) return b.isActive ? b.close() : d.close(), !1
      });
      this.overlay.css(a.css).show()
    },
    close: function() {
      var a, b;
      n.unbind("resize.overlay");
      this.el.hasClass("fancybox-lock") && (f(".fancybox-margin").removeClass("fancybox-margin"), a = n.scrollTop(), b = n.scrollLeft(), this.el.removeClass("fancybox-lock"), n.scrollTop(a).scrollLeft(b));
      f(".fancybox-overlay").remove().hide();
      f.extend(this, {
        overlay: null,
        fixed: !1
      })
    },
    update: function() {
      var a = "100%",
        b;
      this.overlay.width(a).height("100%");
      I ? (b = Math.max(G.documentElement.offsetWidth, G.body.offsetWidth), p.width() > b && (a = p.width())) : p.width() > n.width() && (a = p.width());
      this.overlay.width(a).height(p.height())
    },
    onReady: function(a, b) {
      var e = this.overlay;
      f(".fancybox-overlay").stop(!0, !0);
      e || this.create(a);
      a.locked && (this.fixed && b.fixed) && (e || (this.margin = p.height() > n.height() ? f("html").css("margin-right").replace("px", "") : !1), b.locked = this.overlay.append(b.wrap), b.fixed = !1);
      !0 === a.showEarly && this.beforeShow.apply(this, arguments)
    },
    beforeShow: function(a, b) {
      var e, c;
      b.locked && (!1 !== this.margin && (f("*").filter(function() {
        return "fixed" === f(this).css("position") && !f(this).hasClass("fancybox-overlay") && !f(this).hasClass("fancybox-wrap")
      }).addClass("fancybox-margin"), this.el.addClass("fancybox-margin")), e = n.scrollTop(), c = n.scrollLeft(), this.el.addClass("fancybox-lock"), n.scrollTop(e).scrollLeft(c));
      this.open(a)
    },
    onUpdate: function() {
      this.fixed || this.update()
    },
    afterClose: function(a) {
      this.overlay && !b.coming && this.overlay.fadeOut(a.speedOut, f.proxy(this.close, this))
    }
  };
  b.helpers.title = {
    defaults: {
      type: "float",
      position: "bottom"
    },
    beforeShow: function(a) {
      var d = b.current,
        e = d.title,
        c = a.type;
      f.isFunction(e) && (e = e.call(d.element, d));
      if (q(e) && "" !== f.trim(e)) {
        d = f('<div class="fancybox-title fancybox-title-' + c + '-wrap">' + e + "</div>");
        switch (c) {
          case "inside":
            c = b.skin;
            break;
          case "outside":
            c = b.wrap;
            break;
          case "over":
            c = b.inner;
            break;
          default:
            c = b.skin, d.appendTo("body"), I && d.width(d.width()), d.wrapInner('<span class="child"></span>'), b.current.margin[2] += Math.abs(l(d.css("margin-bottom")))
        }
        d["top" === a.position ? "prependTo" : "appendTo"](c)
      }
    }
  };
  f.fn.fancybox = function(a) {
    var d, e = f(this),
      c = this.selector || "",
      k = function(g) {
        var h = f(this).blur(),
          j = d,
          k, l;
        !g.ctrlKey && (!g.altKey && !g.shiftKey && !g.metaKey) && !h.is(".fancybox-wrap") && (k = a.groupAttr || "data-fancybox-group", l = h.attr(k), l || (k = "rel", l = h.get(0)[k]), l && ("" !== l && "nofollow" !== l) && (h = c.length ? f(c) : e, h = h.filter("[" + k + '="' + l + '"]'), j = h.index(this)), a.index = j, !1 !== b.open(h, a) && g.preventDefault())
      };
    a = a || {};
    d = a.index || 0;
    !c || !1 === a.live ? e.unbind("click.fb-start").bind("click.fb-start", k) : p.undelegate(c, "click.fb-start").delegate(c +
      ":not('.fancybox-item, .fancybox-nav')", "click.fb-start", k);
    this.filter("[data-fancybox-start=1]").trigger("click");
    return this
  };
  p.ready(function() {
    var a, d;
    f.scrollbarWidth === v && (f.scrollbarWidth = function() {
      var a = f('<div style="width:50px;height:50px;overflow:auto"><div/></div>').appendTo("body"),
        b = a.children(),
        b = b.innerWidth() - b.height(99).innerWidth();
      a.remove();
      return b
    });
    if (f.support.fixedPosition === v) {
      a = f.support;
      d = f('<div style="position:fixed;top:20px;"></div>').appendTo("body");
      var e = 20 === d[0].offsetTop || 15 === d[0].offsetTop;
      d.remove();
      a.fixedPosition = e
    }
    f.extend(b.defaults, {
      scrollbarWidth: f.scrollbarWidth(),
      fixed: f.support.fixedPosition,
      parent: f("body")
    });
    a = f(r).width();
    J.addClass("fancybox-lock-test");
    d = f(r).width();
    J.removeClass("fancybox-lock-test");
    f("<style type='text/css'>.fancybox-margin{margin-right:" + (d - a) + "px;}</style>").appendTo("head")
  })
})(window, document, jQuery);;
/*!
 * Thumbnail helper for fancyBox
 * version: 1.0.7 (Mon, 01 Oct 2012)
 * @requires fancyBox v2.0 or later
 *
 * Usage:
 * $(".fancybox").fancybox({
 * helpers : {
 * thumbs: {
 * width : 50,
 * height : 50
 * }
 * }
 * });
 *
 */
(function($) {
  var F = $.fancybox;
  F.helpers.thumbs = {
    defaults: {
      width: 50,
      height: 50,
      position: 'bottom',
      source: function(item) {
        var href;
        if (item.element) {
          href = $(item.element).find('img').attr('src');
        }
        if (!href && item.type === 'image' && item.href) {
          href = item.href;
        }
        return href;
      }
    },
    wrap: null,
    list: null,
    width: 0,
    init: function(opts, obj) {
      var that = this,
        list, thumbWidth = opts.width,
        thumbHeight = opts.height,
        thumbSource = opts.source;
      list = '';
      for (var n = 0; n < obj.group.length; n++) {
        list += '<li><a style="width:' + thumbWidth + 'px;height:' + thumbHeight + 'px;" href="javascript:jQuery.fancybox.jumpto(' + n + ');"></a></li>';
      }
      this.wrap = $('<div id="fancybox-thumbs"></div>').addClass(opts.position).appendTo('body');
      this.list = $('<ul>' + list + '</ul>').appendTo(this.wrap);
      $.each(obj.group, function(i) {
        var href = thumbSource(obj.group[i]);
        if (!href) {
          return;
        }
        $("<img />").load(function() {
          var width = this.width,
            height = this.height,
            widthRatio, heightRatio, parent;
          if (!that.list || !width || !height) {
            return;
          }
          widthRatio = width / thumbWidth;
          heightRatio = height / thumbHeight;
          parent = that.list.children().eq(i).find('a');
          if (widthRatio >= 1 && heightRatio >= 1) {
            if (widthRatio > heightRatio) {
              width = Math.floor(width / heightRatio);
              height = thumbHeight;
            } else {
              width = thumbWidth;
              height = Math.floor(height / widthRatio);
            }
          }
          $(this).css({
            width: width,
            height: height,
            top: Math.floor(thumbHeight / 2 - height / 2),
            left: Math.floor(thumbWidth / 2 - width / 2)
          });
          parent.width(thumbWidth).height(thumbHeight);
          $(this).hide().appendTo(parent).fadeIn(300);
        }).attr('src', href);
      });
      this.width = this.list.children().eq(0).outerWidth(true);
      this.list.width(this.width * (obj.group.length + 1)).css('left', Math.floor($(window).width() * 0.5 - (obj.index * this.width + this.width * 0.5)));
    },
    beforeLoad: function(opts, obj) {
      if (obj.group.length < 2) {
        obj.helpers.thumbs = false;
        return;
      }
      obj.margin[opts.position === 'top' ? 0 : 2] += ((opts.height) + 15);
    },
    afterShow: function(opts, obj) {
      if (this.list) {
        this.onUpdate(opts, obj);
      } else {
        this.init(opts, obj);
      }
      this.list.children().removeClass('active').eq(obj.index).addClass('active');
    },
    onUpdate: function(opts, obj) {
      if (this.list) {
        this.list.stop(true).animate({
          'left': Math.floor($(window).width() * 0.5 - (obj.index * this.width + this.width * 0.5))
        }, 150);
      }
    },
    beforeClose: function() {
      if (this.wrap) {
        this.wrap.remove();
      }
      this.wrap = null;
      this.list = null;
      this.width = 0;
    }
  }
}(jQuery));;
/*!
 * Media helper for fancyBox
 * version: 1.0.6 (Fri, 14 Jun 2013)
 * @requires fancyBox v2.0 or later
 *
 * Usage:
 * $(".fancybox").fancybox({
 * helpers : {
 * media: true
 * }
 * });
 *
 * Set custom URL parameters:
 * $(".fancybox").fancybox({
 * helpers : {
 * media: {
 * youtube : {
 * params : {
 * autoplay : 0
 * }
 * }
 * }
 * }
 * });
 *
 * Or:
 * $(".fancybox").fancybox({,
 * helpers : {
 * media: true
 * },
 * youtube : {
 * autoplay: 0
 * }
 * });
 *
 * Supports:
 *
 * Youtube
 * http://www.youtube.com/watch?v=opj24KnzrWo
 * http://www.youtube.com/embed/opj24KnzrWo
 * http://youtu.be/opj24KnzrWo
 * http://www.youtube-nocookie.com/embed/opj24KnzrWo
 * Vimeo
 * http://vimeo.com/40648169
 * http://vimeo.com/channels/staffpicks/38843628
 * http://vimeo.com/groups/surrealism/videos/36516384
 * http://player.vimeo.com/video/45074303
 * Metacafe
 * http://www.metacafe.com/watch/7635964/dr_seuss_the_lorax_movie_trailer/
 * http://www.metacafe.com/watch/7635964/
 * Dailymotion
 * http://www.dailymotion.com/video/xoytqh_dr-seuss-the-lorax-premiere_people
 * Twitvid
 * http://twitvid.com/QY7MD
 * Twitpic
 * http://twitpic.com/7p93st
 * Instagram
 * http://instagr.am/p/IejkuUGxQn/
 * http://instagram.com/p/IejkuUGxQn/
 * Google maps
 * http://maps.google.com/maps?q=Eiffel+Tower,+Avenue+Gustave+Eiffel,+Paris,+France&t=h&z=17
 * http://maps.google.com/?ll=48.857995,2.294297&spn=0.007666,0.021136&t=m&z=16
 * http://maps.google.com/?ll=48.859463,2.292626&spn=0.000965,0.002642&t=m&z=19&layer=c&cbll=48.859524,2.292532&panoid=YJ0lq28OOy3VT2IqIuVY0g&cbp=12,151.58,,0,-15.56
 */
(function($) {
  "use strict";
  var F = $.fancybox,
    format = function(url, rez, params) {
      params = params || '';
      if ($.type(params) === "object") {
        params = $.param(params, true);
      }
      $.each(rez, function(key, value) {
        url = url.replace('$' + key, value || '');
      });
      if (params.length) {
        url += (url.indexOf('?') > 0 ? '&' : '?') + params;
      }
      return url;
    };
  F.helpers.media = {
    defaults: {
      youtube: {
        matcher: /(youtube\.com|youtu\.be|youtube-nocookie\.com)\/(watch\?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*)).*/i,
        params: {
          autoplay: 1,
          autohide: 1,
          fs: 1,
          rel: 0,
          hd: 1,
          wmode: 'opaque',
          enablejsapi: 1
        },
        type: 'iframe',
        url: '//www.youtube.com/embed/$3'
      },
      vimeo: {
        matcher: /(?:vimeo(?:pro)?.com)\/(?:[^\d]+)?(\d+)(?:.*)/,
        params: {
          autoplay: 1,
          hd: 1,
          show_title: 1,
          show_byline: 1,
          show_portrait: 0,
          fullscreen: 1
        },
        type: 'iframe',
        url: '//player.vimeo.com/video/$1'
      },
      metacafe: {
        matcher: /metacafe.com\/(?:watch|fplayer)\/([\w\-]{1,10})/,
        params: {
          autoPlay: 'yes'
        },
        type: 'swf',
        url: function(rez, params, obj) {
          obj.swf.flashVars = 'playerVars=' + $.param(params, true);
          return '//www.metacafe.com/fplayer/' + rez[1] + '/.swf';
        }
      },
      dailymotion: {
        matcher: /dailymotion.com\/video\/(.*)\/?(.*)/,
        params: {
          additionalInfos: 0,
          autoStart: 1
        },
        type: 'swf',
        url: '//www.dailymotion.com/swf/video/$1'
      },
      twitvid: {
        matcher: /twitvid\.com\/([a-zA-Z0-9_\-\?\=]+)/i,
        params: {
          autoplay: 0
        },
        type: 'iframe',
        url: '//www.twitvid.com/embed.php?guid=$1'
      },
      twitpic: {
        matcher: /twitpic\.com\/(?!(?:place|photos|events)\/)([a-zA-Z0-9\?\=\-]+)/i,
        type: 'image',
        url: '//twitpic.com/show/full/$1/'
      },
      instagram: {
        matcher: /(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,
        type: 'image',
        url: '//$1/p/$2/media/?size=l'
      },
      google_maps: {
        matcher: /maps\.google\.([a-z]{2,3}(\.[a-z]{2})?)\/(\?ll=|maps\?)(.*)/i,
        type: 'iframe',
        url: function(rez) {
          return '//maps.google.' + rez[1] + '/' + rez[3] + '' + rez[4] + '&output=' + (rez[4].indexOf('layer=c') > 0 ? 'svembed' : 'embed');
        }
      }
    },
    beforeLoad: function(opts, obj) {
      var url = obj.href || '',
        type = false,
        what, item, rez, params;
      for (what in opts) {
        if (opts.hasOwnProperty(what)) {
          item = opts[what];
          rez = url.match(item.matcher);
          if (rez) {
            type = item.type;
            params = $.extend(true, {}, item.params, obj[what] || ($.isPlainObject(opts[what]) ? opts[what].params : null));
            url = $.type(item.url) === "function" ? item.url.call(this, rez, params, obj) : format(item.url, rez, params);
            break;
          }
        }
      }
      if (type) {
        obj.href = url;
        obj.type = type;
        obj.autoHeight = false;
      }
    }
  };
}(jQuery));;
/*! jQuery plugin for Hammer.JS - v1.1.3 - 2014-05-20
 * http://eightmedia.github.com/hammer.js
 *
 * Copyright (c) 2014 Jorik Tangelder <j.tangelder@gmail.com>;
 * Licensed under the MIT license */
(function(window, undefined) {
  'use strict';
  var Hammer = function Hammer(element, options) {
    return new Hammer.Instance(element, options || {});
  };
  Hammer.VERSION = '1.1.3';
  Hammer.defaults = {
    behavior: {
      userSelect: 'none',
      touchAction: 'pan-y',
      touchCallout: 'none',
      contentZooming: 'none',
      userDrag: 'none',
      tapHighlightColor: 'rgba(0,0,0,0)'
    }
  };
  Hammer.DOCUMENT = document;
  Hammer.HAS_POINTEREVENTS = navigator.pointerEnabled || navigator.msPointerEnabled;
  Hammer.HAS_TOUCHEVENTS = ('ontouchstart' in window);
  Hammer.IS_MOBILE = /mobile|tablet|ip(ad|hone|od)|android|silk/i.test(navigator.userAgent);
  Hammer.NO_MOUSEEVENTS = (Hammer.HAS_TOUCHEVENTS && Hammer.IS_MOBILE) || Hammer.HAS_POINTEREVENTS;
  Hammer.CALCULATE_INTERVAL = 25;
  var EVENT_TYPES = {};
  var DIRECTION_DOWN = Hammer.DIRECTION_DOWN = 'down';
  var DIRECTION_LEFT = Hammer.DIRECTION_LEFT = 'left';
  var DIRECTION_UP = Hammer.DIRECTION_UP = 'up';
  var DIRECTION_RIGHT = Hammer.DIRECTION_RIGHT = 'right';
  var POINTER_MOUSE = Hammer.POINTER_MOUSE = 'mouse';
  var POINTER_TOUCH = Hammer.POINTER_TOUCH = 'touch';
  var POINTER_PEN = Hammer.POINTER_PEN = 'pen';
  var EVENT_START = Hammer.EVENT_START = 'start';
  var EVENT_MOVE = Hammer.EVENT_MOVE = 'move';
  var EVENT_END = Hammer.EVENT_END = 'end';
  var EVENT_RELEASE = Hammer.EVENT_RELEASE = 'release';
  var EVENT_TOUCH = Hammer.EVENT_TOUCH = 'touch';
  Hammer.READY = false;
  Hammer.plugins = Hammer.plugins || {};
  Hammer.gestures = Hammer.gestures || {};

  function setup() {
    if (Hammer.READY) {
      return;
    }
    Event.determineEventTypes();
    Utils.each(Hammer.gestures, function(gesture) {
      Detection.register(gesture);
    });
    Event.onTouch(Hammer.DOCUMENT, EVENT_MOVE, Detection.detect);
    Event.onTouch(Hammer.DOCUMENT, EVENT_END, Detection.detect);
    Hammer.READY = true;
  }
  var Utils = Hammer.utils = {
    extend: function extend(dest, src, merge) {
      for (var key in src) {
        if (!src.hasOwnProperty(key) || (dest[key] !== undefined && merge)) {
          continue;
        }
        dest[key] = src[key];
      }
      return dest;
    },
    on: function on(element, type, handler) {
      element.addEventListener(type, handler, false);
    },
    off: function off(element, type, handler) {
      element.removeEventListener(type, handler, false);
    },
    each: function each(obj, iterator, context) {
      var i, len;
      if ('forEach' in obj) {
        obj.forEach(iterator, context);
      } else if (obj.length !== undefined) {
        for (i = 0, len = obj.length; i < len; i++) {
          if (iterator.call(context, obj[i], i, obj) === false) {
            return;
          }
        }
      } else {
        for (i in obj) {
          if (obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj) === false) {
            return;
          }
        }
      }
    },
    inStr: function inStr(src, find) {
      return src.indexOf(find) > -1;
    },
    inArray: function inArray(src, find) {
      if (src.indexOf) {
        var index = src.indexOf(find);
        return (index === -1) ? false : index;
      } else {
        for (var i = 0, len = src.length; i < len; i++) {
          if (src[i] === find) {
            return i;
          }
        }
        return false;
      }
    },
    toArray: function toArray(obj) {
      return Array.prototype.slice.call(obj, 0);
    },
    hasParent: function hasParent(node, parent) {
      while (node) {
        if (node == parent) {
          return true;
        }
        node = node.parentNode;
      }
      return false;
    },
    getCenter: function getCenter(touches) {
      var pageX = [],
        pageY = [],
        clientX = [],
        clientY = [],
        min = Math.min,
        max = Math.max;
      if (touches.length === 1) {
        return {
          pageX: touches[0].pageX,
          pageY: touches[0].pageY,
          clientX: touches[0].clientX,
          clientY: touches[0].clientY
        };
      }
      Utils.each(touches, function(touch) {
        pageX.push(touch.pageX);
        pageY.push(touch.pageY);
        clientX.push(touch.clientX);
        clientY.push(touch.clientY);
      });
      return {
        pageX: (min.apply(Math, pageX) + max.apply(Math, pageX)) / 2,
        pageY: (min.apply(Math, pageY) + max.apply(Math, pageY)) / 2,
        clientX: (min.apply(Math, clientX) + max.apply(Math, clientX)) / 2,
        clientY: (min.apply(Math, clientY) + max.apply(Math, clientY)) / 2
      };
    },
    getVelocity: function getVelocity(deltaTime, deltaX, deltaY) {
      return {
        x: Math.abs(deltaX / deltaTime) || 0,
        y: Math.abs(deltaY / deltaTime) || 0
      };
    },
    getAngle: function getAngle(touch1, touch2) {
      var x = touch2.clientX - touch1.clientX,
        y = touch2.clientY - touch1.clientY;
      return Math.atan2(y, x) * 180 / Math.PI;
    },
    getDirection: function getDirection(touch1, touch2) {
      var x = Math.abs(touch1.clientX - touch2.clientX),
        y = Math.abs(touch1.clientY - touch2.clientY);
      if (x >= y) {
        return touch1.clientX - touch2.clientX > 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;
      }
      return touch1.clientY - touch2.clientY > 0 ? DIRECTION_UP : DIRECTION_DOWN;
    },
    getDistance: function getDistance(touch1, touch2) {
      var x = touch2.clientX - touch1.clientX,
        y = touch2.clientY - touch1.clientY;
      return Math.sqrt((x * x) + (y * y));
    },
    getScale: function getScale(start, end) {
      if (start.length >= 2 && end.length >= 2) {
        return this.getDistance(end[0], end[1]) / this.getDistance(start[0], start[1]);
      }
      return 1;
    },
    getRotation: function getRotation(start, end) {
      if (start.length >= 2 && end.length >= 2) {
        return this.getAngle(end[1], end[0]) - this.getAngle(start[1], start[0]);
      }
      return 0;
    },
    isVertical: function isVertical(direction) {
      return direction == DIRECTION_UP || direction == DIRECTION_DOWN;
    },
    setPrefixedCss: function setPrefixedCss(element, prop, value, toggle) {
      var prefixes = ['', 'Webkit', 'Moz', 'O', 'ms'];
      prop = Utils.toCamelCase(prop);
      for (var i = 0; i < prefixes.length; i++) {
        var p = prop;
        if (prefixes[i]) {
          p = prefixes[i] + p.slice(0, 1).toUpperCase() + p.slice(1);
        }
        if (p in element.style) {
          element.style[p] = (toggle == null || toggle) && value || '';
          break;
        }
      }
    },
    toggleBehavior: function toggleBehavior(element, props, toggle) {
      if (!props || !element || !element.style) {
        return;
      }
      Utils.each(props, function(value, prop) {
        Utils.setPrefixedCss(element, prop, value, toggle);
      });
      var falseFn = toggle && function() {
        return false;
      };
      if (props.userSelect == 'none') {
        element.onselectstart = falseFn;
      }
      if (props.userDrag == 'none') {
        element.ondragstart = falseFn;
      }
    },
    toCamelCase: function toCamelCase(str) {
      return str.replace(/[_-]([a-z])/g, function(s) {
        return s[1].toUpperCase();
      });
    }
  };
  Hammer.Instance = function(element, options) {
    var self = this;
    setup();
    this.element = element;
    this.enabled = true;
    Utils.each(options, function(value, name) {
      delete options[name];
      options[Utils.toCamelCase(name)] = value;
    });
    this.options = Utils.extend(Utils.extend({}, Hammer.defaults), options || {});
    if (this.options.behavior) {
      Utils.toggleBehavior(this.element, this.options.behavior, true);
    }
    this.eventStartHandler = Event.onTouch(element, EVENT_START, function(ev) {
      if (self.enabled && ev.eventType == EVENT_START) {
        Detection.startDetect(self, ev);
      } else if (ev.eventType == EVENT_TOUCH) {
        Detection.detect(ev);
      }
    });
    this.eventHandlers = [];
  };
  Hammer.Instance.prototype = {
    on: function onEvent(gestures, handler) {
      var self = this;
      Event.on(self.element, gestures, handler, function(type) {
        self.eventHandlers.push({
          gesture: type,
          handler: handler
        });
      });
      return self;
    },
    off: function offEvent(gestures, handler) {
      var self = this;
      Event.off(self.element, gestures, handler, function(type) {
        var index = Utils.inArray({
          gesture: type,
          handler: handler
        });
        if (index !== false) {
          self.eventHandlers.splice(index, 1);
        }
      });
      return self;
    },
    trigger: function triggerEvent(gesture, eventData) {
      if (!eventData) {
        eventData = {};
      }
      var event = Hammer.DOCUMENT.createEvent('Event');
      event.initEvent(gesture, true, true);
      event.gesture = eventData;
      var element = this.element;
      if (Utils.hasParent(eventData.target, element)) {
        element = eventData.target;
      }
      element.dispatchEvent(event);
      return this;
    },
    enable: function enable(state) {
      this.enabled = state;
      return this;
    },
    dispose: function dispose() {
      var i, eh;
      Utils.toggleBehavior(this.element, this.options.behavior, false);
      for (i = -1;
        (eh = this.eventHandlers[++i]);) {
        Utils.off(this.element, eh.gesture, eh.handler);
      }
      this.eventHandlers = [];
      Event.off(this.element, EVENT_TYPES[EVENT_START], this.eventStartHandler);
      return null;
    }
  };
  var Event = Hammer.event = {
    preventMouseEvents: false,
    started: false,
    shouldDetect: false,
    on: function on(element, type, handler, hook) {
      var types = type.split(' ');
      Utils.each(types, function(type) {
        Utils.on(element, type, handler);
        hook && hook(type);
      });
    },
    off: function off(element, type, handler, hook) {
      var types = type.split(' ');
      Utils.each(types, function(type) {
        Utils.off(element, type, handler);
        hook && hook(type);
      });
    },
    onTouch: function onTouch(element, eventType, handler) {
      var self = this;
      var onTouchHandler = function onTouchHandler(ev) {
        var srcType = ev.type.toLowerCase(),
          isPointer = Hammer.HAS_POINTEREVENTS,
          isMouse = Utils.inStr(srcType, 'mouse'),
          triggerType;
        if (isMouse && self.preventMouseEvents) {
          return;
        } else if (isMouse && eventType == EVENT_START && ev.button === 0) {
          self.preventMouseEvents = false;
          self.shouldDetect = true;
        } else if (isPointer && eventType == EVENT_START) {
          self.shouldDetect = (ev.buttons === 1 || PointerEvent.matchType(POINTER_TOUCH, ev));
        } else if (!isMouse && eventType == EVENT_START) {
          self.preventMouseEvents = true;
          self.shouldDetect = true;
        }
        if (isPointer && eventType != EVENT_END) {
          PointerEvent.updatePointer(eventType, ev);
        }
        if (self.shouldDetect) {
          triggerType = self.doDetect.call(self, ev, eventType, element, handler);
        }
        if (triggerType == EVENT_END) {
          self.preventMouseEvents = false;
          self.shouldDetect = false;
          PointerEvent.reset();
        }
        if (isPointer && eventType == EVENT_END) {
          PointerEvent.updatePointer(eventType, ev);
        }
      };
      this.on(element, EVENT_TYPES[eventType], onTouchHandler);
      return onTouchHandler;
    },
    doDetect: function doDetect(ev, eventType, element, handler) {
      var touchList = this.getTouchList(ev, eventType);
      var touchListLength = touchList.length;
      var triggerType = eventType;
      var triggerChange = touchList.trigger;
      var changedLength = touchListLength;
      if (eventType == EVENT_START) {
        triggerChange = EVENT_TOUCH;
      } else if (eventType == EVENT_END) {
        triggerChange = EVENT_RELEASE;
        changedLength = touchList.length - ((ev.changedTouches) ? ev.changedTouches.length : 1);
      }
      if (changedLength > 0 && this.started) {
        triggerType = EVENT_MOVE;
      }
      this.started = true;
      var evData = this.collectEventData(element, triggerType, touchList, ev);
      if (eventType != EVENT_END) {
        handler.call(Detection, evData);
      }
      if (triggerChange) {
        evData.changedLength = changedLength;
        evData.eventType = triggerChange;
        handler.call(Detection, evData);
        evData.eventType = triggerType;
        delete evData.changedLength;
      }
      if (triggerType == EVENT_END) {
        handler.call(Detection, evData);
        this.started = false;
      }
      return triggerType;
    },
    determineEventTypes: function determineEventTypes() {
      var types;
      if (Hammer.HAS_POINTEREVENTS) {
        if (window.PointerEvent) {
          types = ['pointerdown', 'pointermove', 'pointerup pointercancel lostpointercapture'];
        } else {
          types = ['MSPointerDown', 'MSPointerMove', 'MSPointerUp MSPointerCancel MSLostPointerCapture'];
        }
      } else if (Hammer.NO_MOUSEEVENTS) {
        types = ['touchstart', 'touchmove', 'touchend touchcancel'];
      } else {
        types = ['touchstart mousedown', 'touchmove mousemove', 'touchend touchcancel mouseup'];
      }
      EVENT_TYPES[EVENT_START] = types[0];
      EVENT_TYPES[EVENT_MOVE] = types[1];
      EVENT_TYPES[EVENT_END] = types[2];
      return EVENT_TYPES;
    },
    getTouchList: function getTouchList(ev, eventType) {
      if (Hammer.HAS_POINTEREVENTS) {
        return PointerEvent.getTouchList();
      }
      if (ev.touches) {
        if (eventType == EVENT_MOVE) {
          return ev.touches;
        }
        var identifiers = [];
        var concat = [].concat(Utils.toArray(ev.touches), Utils.toArray(ev.changedTouches));
        var touchList = [];
        Utils.each(concat, function(touch) {
          if (Utils.inArray(identifiers, touch.identifier) === false) {
            touchList.push(touch);
          }
          identifiers.push(touch.identifier);
        });
        return touchList;
      }
      ev.identifier = 1;
      return [ev];
    },
    collectEventData: function collectEventData(element, eventType, touches, ev) {
      var pointerType = POINTER_TOUCH;
      if (Utils.inStr(ev.type, 'mouse') || PointerEvent.matchType(POINTER_MOUSE, ev)) {
        pointerType = POINTER_MOUSE;
      } else if (PointerEvent.matchType(POINTER_PEN, ev)) {
        pointerType = POINTER_PEN;
      }
      return {
        center: Utils.getCenter(touches),
        timeStamp: Date.now(),
        target: ev.target,
        touches: touches,
        eventType: eventType,
        pointerType: pointerType,
        srcEvent: ev,
        preventDefault: function() {
          var srcEvent = this.srcEvent;
          srcEvent.preventManipulation && srcEvent.preventManipulation();
          srcEvent.preventDefault && srcEvent.preventDefault();
        },
        stopPropagation: function() {
          this.srcEvent.stopPropagation();
        },
        stopDetect: function() {
          return Detection.stopDetect();
        }
      };
    }
  };
  var PointerEvent = Hammer.PointerEvent = {
    pointers: {},
    getTouchList: function getTouchList() {
      var touchlist = [];
      Utils.each(this.pointers, function(pointer) {
        touchlist.push(pointer);
      });
      return touchlist;
    },
    updatePointer: function updatePointer(eventType, pointerEvent) {
      if (eventType == EVENT_END || (eventType != EVENT_END && pointerEvent.buttons !== 1)) {
        delete this.pointers[pointerEvent.pointerId];
      } else {
        pointerEvent.identifier = pointerEvent.pointerId;
        this.pointers[pointerEvent.pointerId] = pointerEvent;
      }
    },
    matchType: function matchType(pointerType, ev) {
      if (!ev.pointerType) {
        return false;
      }
      var pt = ev.pointerType,
        types = {};
      types[POINTER_MOUSE] = (pt === (ev.MSPOINTER_TYPE_MOUSE || POINTER_MOUSE));
      types[POINTER_TOUCH] = (pt === (ev.MSPOINTER_TYPE_TOUCH || POINTER_TOUCH));
      types[POINTER_PEN] = (pt === (ev.MSPOINTER_TYPE_PEN || POINTER_PEN));
      return types[pointerType];
    },
    reset: function resetList() {
      this.pointers = {};
    }
  };
  var Detection = Hammer.detection = {
    gestures: [],
    current: null,
    previous: null,
    stopped: false,
    startDetect: function startDetect(inst, eventData) {
      if (this.current) {
        return;
      }
      this.stopped = false;
      this.current = {
        inst: inst,
        startEvent: Utils.extend({}, eventData),
        lastEvent: false,
        lastCalcEvent: false,
        futureCalcEvent: false,
        lastCalcData: {},
        name: ''
      };
      this.detect(eventData);
    },
    detect: function detect(eventData) {
      if (!this.current || this.stopped) {
        return;
      }
      eventData = this.extendEventData(eventData);
      var inst = this.current.inst,
        instOptions = inst.options;
      Utils.each(this.gestures, function triggerGesture(gesture) {
        if (!this.stopped && inst.enabled && instOptions[gesture.name]) {
          gesture.handler.call(gesture, eventData, inst);
        }
      }, this);
      if (this.current) {
        this.current.lastEvent = eventData;
      }
      if (eventData.eventType == EVENT_END) {
        this.stopDetect();
      }
      return eventData;
    },
    stopDetect: function stopDetect() {
      this.previous = Utils.extend({}, this.current);
      this.current = null;
      this.stopped = true;
    },
    getCalculatedData: function getCalculatedData(ev, center, deltaTime, deltaX, deltaY) {
      var cur = this.current,
        recalc = false,
        calcEv = cur.lastCalcEvent,
        calcData = cur.lastCalcData;
      if (calcEv && ev.timeStamp - calcEv.timeStamp > Hammer.CALCULATE_INTERVAL) {
        center = calcEv.center;
        deltaTime = ev.timeStamp - calcEv.timeStamp;
        deltaX = ev.center.clientX - calcEv.center.clientX;
        deltaY = ev.center.clientY - calcEv.center.clientY;
        recalc = true;
      }
      if (ev.eventType == EVENT_TOUCH || ev.eventType == EVENT_RELEASE) {
        cur.futureCalcEvent = ev;
      }
      if (!cur.lastCalcEvent || recalc) {
        calcData.velocity = Utils.getVelocity(deltaTime, deltaX, deltaY);
        calcData.angle = Utils.getAngle(center, ev.center);
        calcData.direction = Utils.getDirection(center, ev.center);
        cur.lastCalcEvent = cur.futureCalcEvent || ev;
        cur.futureCalcEvent = ev;
      }
      ev.velocityX = calcData.velocity.x;
      ev.velocityY = calcData.velocity.y;
      ev.interimAngle = calcData.angle;
      ev.interimDirection = calcData.direction;
    },
    extendEventData: function extendEventData(ev) {
      var cur = this.current,
        startEv = cur.startEvent,
        lastEv = cur.lastEvent || startEv;
      if (ev.eventType == EVENT_TOUCH || ev.eventType == EVENT_RELEASE) {
        startEv.touches = [];
        Utils.each(ev.touches, function(touch) {
          startEv.touches.push({
            clientX: touch.clientX,
            clientY: touch.clientY
          });
        });
      }
      var deltaTime = ev.timeStamp - startEv.timeStamp,
        deltaX = ev.center.clientX - startEv.center.clientX,
        deltaY = ev.center.clientY - startEv.center.clientY;
      this.getCalculatedData(ev, lastEv.center, deltaTime, deltaX, deltaY);
      Utils.extend(ev, {
        startEvent: startEv,
        deltaTime: deltaTime,
        deltaX: deltaX,
        deltaY: deltaY,
        distance: Utils.getDistance(startEv.center, ev.center),
        angle: Utils.getAngle(startEv.center, ev.center),
        direction: Utils.getDirection(startEv.center, ev.center),
        scale: Utils.getScale(startEv.touches, ev.touches),
        rotation: Utils.getRotation(startEv.touches, ev.touches)
      });
      return ev;
    },
    register: function register(gesture) {
      var options = gesture.defaults || {};
      if (options[gesture.name] === undefined) {
        options[gesture.name] = true;
      }
      Utils.extend(Hammer.defaults, options, true);
      gesture.index = gesture.index || 1000;
      this.gestures.push(gesture);
      this.gestures.sort(function(a, b) {
        if (a.index < b.index) {
          return -1;
        }
        if (a.index > b.index) {
          return 1;
        }
        return 0;
      });
      return this.gestures;
    }
  };
  (function(name) {
    var triggered = false;

    function dragGesture(ev, inst) {
      var cur = Detection.current;
      if (inst.options.dragMaxTouches > 0 && ev.touches.length > inst.options.dragMaxTouches) {
        return;
      }
      switch (ev.eventType) {
        case EVENT_START:
          triggered = false;
          break;
        case EVENT_MOVE:
          if (ev.distance < inst.options.dragMinDistance && cur.name != name) {
            return;
          }
          var startCenter = cur.startEvent.center;
          if (cur.name != name) {
            cur.name = name;
            if (inst.options.dragDistanceCorrection && ev.distance > 0) {
              var factor = Math.abs(inst.options.dragMinDistance / ev.distance);
              startCenter.pageX += ev.deltaX * factor;
              startCenter.pageY += ev.deltaY * factor;
              startCenter.clientX += ev.deltaX * factor;
              startCenter.clientY += ev.deltaY * factor;
              ev = Detection.extendEventData(ev);
            }
          }
          if (cur.lastEvent.dragLockToAxis || (inst.options.dragLockToAxis && inst.options.dragLockMinDistance <= ev.distance)) {
            ev.dragLockToAxis = true;
          }
          var lastDirection = cur.lastEvent.direction;
          if (ev.dragLockToAxis && lastDirection !== ev.direction) {
            if (Utils.isVertical(lastDirection)) {
              ev.direction = (ev.deltaY < 0) ? DIRECTION_UP : DIRECTION_DOWN;
            } else {
              ev.direction = (ev.deltaX < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;
            }
          }
          if (!triggered) {
            inst.trigger(name + 'start', ev);
            triggered = true;
          }
          inst.trigger(name, ev);
          inst.trigger(name + ev.direction, ev);
          var isVertical = Utils.isVertical(ev.direction);
          if ((inst.options.dragBlockVertical && isVertical) || (inst.options.dragBlockHorizontal && !isVertical)) {
            ev.preventDefault();
          }
          break;
        case EVENT_RELEASE:
          if (triggered && ev.changedLength <= inst.options.dragMaxTouches) {
            inst.trigger(name + 'end', ev);
            triggered = false;
          }
          break;
        case EVENT_END:
          triggered = false;
          break;
      }
    }
    Hammer.gestures.Drag = {
      name: name,
      index: 50,
      handler: dragGesture,
      defaults: {
        dragMinDistance: 10,
        dragDistanceCorrection: true,
        dragMaxTouches: 1,
        dragBlockHorizontal: false,
        dragBlockVertical: false,
        dragLockToAxis: false,
        dragLockMinDistance: 25
      }
    };
  })('drag');
  Hammer.gestures.Gesture = {
    name: 'gesture',
    index: 1337,
    handler: function releaseGesture(ev, inst) {
      inst.trigger(this.name, ev);
    }
  };
  (function(name) {
    var timer;

    function holdGesture(ev, inst) {
      var options = inst.options,
        current = Detection.current;
      switch (ev.eventType) {
        case EVENT_START:
          clearTimeout(timer);
          current.name = name;
          timer = setTimeout(function() {
            if (current && current.name == name) {
              inst.trigger(name, ev);
            }
          }, options.holdTimeout);
          break;
        case EVENT_MOVE:
          if (ev.distance > options.holdThreshold) {
            clearTimeout(timer);
          }
          break;
        case EVENT_RELEASE:
          clearTimeout(timer);
          break;
      }
    }
    Hammer.gestures.Hold = {
      name: name,
      index: 10,
      defaults: {
        holdTimeout: 500,
        holdThreshold: 2
      },
      handler: holdGesture
    };
  })('hold');
  Hammer.gestures.Release = {
    name: 'release',
    index: Infinity,
    handler: function releaseGesture(ev, inst) {
      if (ev.eventType == EVENT_RELEASE) {
        inst.trigger(this.name, ev);
      }
    }
  };
  Hammer.gestures.Swipe = {
    name: 'swipe',
    index: 40,
    defaults: {
      swipeMinTouches: 1,
      swipeMaxTouches: 1,
      swipeVelocityX: 0.6,
      swipeVelocityY: 0.6
    },
    handler: function swipeGesture(ev, inst) {
      if (ev.eventType == EVENT_RELEASE) {
        var touches = ev.touches.length,
          options = inst.options;
        if (touches < options.swipeMinTouches || touches > options.swipeMaxTouches) {
          return;
        }
        if (ev.velocityX > options.swipeVelocityX || ev.velocityY > options.swipeVelocityY) {
          inst.trigger(this.name, ev);
          inst.trigger(this.name + ev.direction, ev);
        }
      }
    }
  };
  (function(name) {
    var hasMoved = false;

    function tapGesture(ev, inst) {
      var options = inst.options,
        current = Detection.current,
        prev = Detection.previous,
        sincePrev, didDoubleTap;
      switch (ev.eventType) {
        case EVENT_START:
          hasMoved = false;
          break;
        case EVENT_MOVE:
          hasMoved = hasMoved || (ev.distance > options.tapMaxDistance);
          break;
        case EVENT_END:
          if (!Utils.inStr(ev.srcEvent.type, 'cancel') && ev.deltaTime < options.tapMaxTime && !hasMoved) {
            sincePrev = prev && prev.lastEvent && ev.timeStamp - prev.lastEvent.timeStamp;
            didDoubleTap = false;
            if (prev && prev.name == name && (sincePrev && sincePrev < options.doubleTapInterval) && ev.distance < options.doubleTapDistance) {
              inst.trigger('doubletap', ev);
              didDoubleTap = true;
            }
            if (!didDoubleTap || options.tapAlways) {
              current.name = name;
              inst.trigger(current.name, ev);
            }
          }
          break;
      }
    }
    Hammer.gestures.Tap = {
      name: name,
      index: 100,
      handler: tapGesture,
      defaults: {
        tapMaxTime: 250,
        tapMaxDistance: 10,
        tapAlways: true,
        doubleTapDistance: 20,
        doubleTapInterval: 300
      }
    };
  })('tap');
  Hammer.gestures.Touch = {
    name: 'touch',
    index: -Infinity,
    defaults: {
      preventDefault: false,
      preventMouse: false
    },
    handler: function touchGesture(ev, inst) {
      if (inst.options.preventMouse && ev.pointerType == POINTER_MOUSE) {
        ev.stopDetect();
        return;
      }
      if (inst.options.preventDefault) {
        ev.preventDefault();
      }
      if (ev.eventType == EVENT_TOUCH) {
        inst.trigger('touch', ev);
      }
    }
  };
  (function(name) {
    var triggered = false;

    function transformGesture(ev, inst) {
      switch (ev.eventType) {
        case EVENT_START:
          triggered = false;
          break;
        case EVENT_MOVE:
          if (ev.touches.length < 2) {
            return;
          }
          var scaleThreshold = Math.abs(1 - ev.scale);
          var rotationThreshold = Math.abs(ev.rotation);
          if (scaleThreshold < inst.options.transformMinScale && rotationThreshold < inst.options.transformMinRotation) {
            return;
          }
          Detection.current.name = name;
          if (!triggered) {
            inst.trigger(name + 'start', ev);
            triggered = true;
          }
          inst.trigger(name, ev);
          if (rotationThreshold > inst.options.transformMinRotation) {
            inst.trigger('rotate', ev);
          }
          if (scaleThreshold > inst.options.transformMinScale) {
            inst.trigger('pinch', ev);
            inst.trigger('pinch' + (ev.scale < 1 ? 'in' : 'out'), ev);
          }
          break;
        case EVENT_RELEASE:
          if (triggered && ev.changedLength < 2) {
            inst.trigger(name + 'end', ev);
            triggered = false;
          }
          break;
      }
    }
    Hammer.gestures.Transform = {
      name: name,
      index: 45,
      defaults: {
        transformMinScale: 0.01,
        transformMinRotation: 1
      },
      handler: transformGesture
    };
  })('transform');
  window.Hammer = Hammer;
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = Hammer;
  }

  function setupPlugin(Hammer, $) {
    if (!Date.now) {
      Date.now = function now() {
        return new Date().getTime();
      };
    }
    Hammer.utils.each(['on', 'off'], function(method) {
      Hammer.utils[method] = function(element, type, handler) {
        $(element)[method](type, function($ev) {
          var data = $.extend({}, $ev.originalEvent, $ev);
          if (data.button === undefined) {
            data.button = $ev.which - 1;
          }
          handler.call(this, data);
        });
      };
    });
    Hammer.Instance.prototype.trigger = function(gesture, eventData) {
      var el = $(this.element);
      if (el.has(eventData.target).length) {
        el = $(eventData.target);
      }
      return el.trigger({
        type: gesture,
        gesture: eventData
      });
    };
    $.fn.hammer = function(options) {
      return this.each(function() {
        var el = $(this);
        var inst = el.data('hammer');
        if (!inst) {
          el.data('hammer', new Hammer(this, options || {}));
        } else if (inst && options) {
          Hammer.utils.extend(inst.options, options);
        }
      });
    };
  }
  if (typeof define == 'function' && define.amd) {
    define(['jquery'], function($) {
      return setupPlugin(window.Hammer, $);
    });
  } else {
    setupPlugin(window.Hammer, window.jQuery || window.Zepto);
  }
})(window);;
/*!
 * hoverIntent r7 // 2013.03.11 // jQuery 1.9.1+
 * http://cherne.net/brian/resources/jquery.hoverIntent.html
 *
 * You may use hoverIntent under the terms of the MIT license. Basically that
 * means you are free to use hoverIntent as long as this header is left intact.
 * Copyright 2007, 2013 Brian Cherne
 */
(function($) {
  $.fn.hoverIntent = function(handlerIn, handlerOut, selector) {
    var cfg = {
      interval: 100,
      sensitivity: 7,
      timeout: 0
    };
    if (typeof handlerIn === "object") {
      cfg = $.extend(cfg, handlerIn);
    } else if ($.isFunction(handlerOut)) {
      cfg = $.extend(cfg, {
        over: handlerIn,
        out: handlerOut,
        selector: selector
      });
    } else {
      cfg = $.extend(cfg, {
        over: handlerIn,
        out: handlerIn,
        selector: handlerOut
      });
    }
    var cX, cY, pX, pY;
    var track = function(ev) {
      cX = ev.pageX;
      cY = ev.pageY;
    };
    var compare = function(ev, ob) {
      ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
      if ((Math.abs(pX - cX) + Math.abs(pY - cY)) < cfg.sensitivity) {
        $(ob).off("mousemove.hoverIntent", track);
        ob.hoverIntent_s = 1;
        return cfg.over.apply(ob, [ev]);
      } else {
        pX = cX;
        pY = cY;
        ob.hoverIntent_t = setTimeout(function() {
          compare(ev, ob);
        }, cfg.interval);
      }
    };
    var delay = function(ev, ob) {
      ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
      ob.hoverIntent_s = 0;
      return cfg.out.apply(ob, [ev]);
    };
    var handleHover = function(e) {
      var ev = jQuery.extend({}, e);
      var ob = this;
      if (ob.hoverIntent_t) {
        ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
      }
      if (e.type == "mouseenter") {
        pX = ev.pageX;
        pY = ev.pageY;
        $(ob).on("mousemove.hoverIntent", track);
        if (ob.hoverIntent_s != 1) {
          ob.hoverIntent_t = setTimeout(function() {
            compare(ev, ob);
          }, cfg.interval);
        }
      } else {
        $(ob).off("mousemove.hoverIntent", track);
        if (ob.hoverIntent_s == 1) {
          ob.hoverIntent_t = setTimeout(function() {
            delay(ev, ob);
          }, cfg.timeout);
        }
      }
    };
    return this.on({
      'mouseenter.hoverIntent': handleHover,
      'mouseleave.hoverIntent': handleHover
    }, cfg.selector);
  };
})(jQuery);; /*!jQuery Knob*/
(function(factory) {
  if (typeof define === 'function' && define.amd) {
    define(['jquery'], factory);
  } else {
    factory(jQuery);
  }
}(function($) {
  "use strict";
  var k = {},
    max = Math.max,
    min = Math.min;
  k.c = {};
  k.c.d = $(document);
  k.c.t = function(e) {
    return e.originalEvent.touches.length - 1;
  };
  k.o = function() {
    var s = this;
    this.o = null;
    this.$ = null;
    this.i = null;
    this.g = null;
    this.v = null;
    this.cv = null;
    this.x = 0;
    this.y = 0;
    this.w = 0;
    this.h = 0;
    this.$c = null;
    this.c = null;
    this.t = 0;
    this.isInit = false;
    this.fgColor = null;
    this.pColor = null;
    this.dH = null;
    this.cH = null;
    this.eH = null;
    this.rH = null;
    this.scale = 1;
    this.relative = false;
    this.relativeWidth = false;
    this.relativeHeight = false;
    this.$div = null;
    this.run = function() {
      var cf = function(e, conf) {
        var k;
        for (k in conf) {
          s.o[k] = conf[k];
        }
        s._carve().init();
        s._configure()._draw();
      };
      if (this.$.data('kontroled')) return;
      this.$.data('kontroled', true);
      this.extend();
      this.o = $.extend({
        min: this.$.data('min') !== undefined ? this.$.data('min') : 0,
        max: this.$.data('max') !== undefined ? this.$.data('max') : 100,
        stopper: true,
        readOnly: this.$.data('readonly') || (this.$.attr('readonly') === 'readonly'),
        cursor: (this.$.data('cursor') === true && 30) || this.$.data('cursor') || 0,
        thickness: (this.$.data('thickness') && Math.max(Math.min(this.$.data('thickness'), 1), 0.01)) || 0.35,
        lineCap: this.$.data('linecap') || 'butt',
        width: this.$.data('width') || 200,
        height: this.$.data('height') || 200,
        displayInput: this.$.data('displayinput') == null || this.$.data('displayinput'),
        displayPrevious: this.$.data('displayprevious'),
        fgColor: this.$.data('fgcolor') || '#87CEEB',
        inputColor: this.$.data('inputcolor'),
        font: this.$.data('font') || 'Arial',
        fontWeight: this.$.data('font-weight') || 'bold',
        inline: false,
        step: this.$.data('step') || 1,
        rotation: this.$.data('rotation'),
        draw: null,
        change: null,
        cancel: null,
        release: null,
        format: function(v) {
          return v;
        },
        parse: function(v) {
          return parseFloat(v);
        }
      }, this.o);
      this.o.flip = this.o.rotation === 'anticlockwise' || this.o.rotation === 'acw';
      if (!this.o.inputColor) {
        this.o.inputColor = this.o.fgColor;
      }
      if (this.$.is('fieldset')) {
        this.v = {};
        this.i = this.$.find('input');
        this.i.each(function(k) {
          var $this = $(this);
          s.i[k] = $this;
          s.v[k] = s.o.parse($this.val());
          $this.bind('change blur', function() {
            var val = {};
            val[k] = $this.val();
            s.val(val);
          });
        });
        this.$.find('legend').remove();
      } else {
        this.i = this.$;
        this.v = this.o.parse(this.$.val());
        (this.v === '') && (this.v = this.o.min);
        this.$.bind('change blur', function() {
          s.val(s._validate(s.o.parse(s.$.val())));
        });
      }
      (!this.o.displayInput) && this.$.hide();
      this.$c = $(document.createElement('canvas')).attr({
        width: this.o.width,
        height: this.o.height
      });
      this.$div = $('<div style="' +
        (this.o.inline ? 'display:inline;' : '') +
        'width:' + this.o.width + 'px;height:' + this.o.height + 'px;' +
        '"></div>');
      this.$.wrap(this.$div).before(this.$c);
      this.$div = this.$.parent();
      if (typeof G_vmlCanvasManager !== 'undefined') {
        G_vmlCanvasManager.initElement(this.$c[0]);
      }
      this.c = this.$c[0].getContext ? this.$c[0].getContext('2d') : null;
      if (!this.c) {
        throw {
          name: "CanvasNotSupportedException",
          message: "Canvas not supported. Please use excanvas on IE8.0.",
          toString: function() {
            return this.name + ": " + this.message
          }
        }
      }
      this.scale = (window.devicePixelRatio || 1) / (this.c.webkitBackingStorePixelRatio || this.c.mozBackingStorePixelRatio || this.c.msBackingStorePixelRatio || this.c.oBackingStorePixelRatio || this.c.backingStorePixelRatio || 1);
      this.relativeWidth = ((this.o.width % 1 !== 0) && this.o.width.indexOf('%'));
      this.relativeHeight = ((this.o.height % 1 !== 0) && this.o.height.indexOf('%'));
      this.relative = (this.relativeWidth || this.relativeHeight);
      this._carve();
      if (this.v instanceof Object) {
        this.cv = {};
        this.copy(this.v, this.cv);
      } else {
        this.cv = this.v;
      }
      this.$.bind("configure", cf).parent().bind("configure", cf);
      this._listen()._configure()._xy().init();
      this.isInit = true;
      this.$.val(this.o.format(this.v));
      this._draw();
      return this;
    };
    this._carve = function() {
      if (this.relative) {
        var w = this.relativeWidth ? this.$div.parent().width() * parseInt(this.o.width) / 100 : this.$div.parent().width(),
          h = this.relativeHeight ? this.$div.parent().height() * parseInt(this.o.height) / 100 : this.$div.parent().height();
        this.w = this.h = Math.min(w, h);
      } else {
        this.w = this.o.width;
        this.h = this.o.height;
      }
      this.$div.css({
        'width': this.w + 'px',
        'height': this.h + 'px'
      });
      this.$c.attr({
        width: this.w,
        height: this.h
      });
      if (this.scale !== 1) {
        this.$c[0].width = this.$c[0].width * this.scale;
        this.$c[0].height = this.$c[0].height * this.scale;
        this.$c.width(this.w);
        this.$c.height(this.h);
      }
      return this;
    }
    this._draw = function() {
      var d = true;
      s.g = s.c;
      s.clear();
      s.dH && (d = s.dH());
      (d !== false) && s.draw();
    };
    this._touch = function(e) {
      var touchMove = function(e) {
        var v = s.xy2val(e.originalEvent.touches[s.t].pageX, e.originalEvent.touches[s.t].pageY);
        if (v == s.cv) return;
        if (s.cH && (s.cH(v) === false)) return;
        s.change(s._validate(v));
        s._draw();
      };
      this.t = k.c.t(e);
      touchMove(e);
      k.c.d.bind("touchmove.k", touchMove).bind("touchend.k", function() {
        k.c.d.unbind('touchmove.k touchend.k');
        s.val(s.cv);
      });
      return this;
    };
    this._mouse = function(e) {
      var mouseMove = function(e) {
        var v = s.xy2val(e.pageX, e.pageY);
        if (v == s.cv) return;
        if (s.cH && (s.cH(v) === false)) return;
        s.change(s._validate(v));
        s._draw();
      };
      mouseMove(e);
      k.c.d.bind("mousemove.k", mouseMove).bind("keyup.k", function(e) {
        if (e.keyCode === 27) {
          k.c.d.unbind("mouseup.k mousemove.k keyup.k");
          if (s.eH && (s.eH() === false)) return;
          s.cancel();
        }
      }).bind("mouseup.k", function(e) {
        k.c.d.unbind('mousemove.k mouseup.k keyup.k');
        s.val(s.cv);
      });
      return this;
    };
    this._xy = function() {
      var o = this.$c.offset();
      this.x = o.left;
      this.y = o.top;
      return this;
    };
    this._listen = function() {
      if (!this.o.readOnly) {
        this.$c.bind("mousedown", function(e) {
          e.preventDefault();
          s._xy()._mouse(e);
        }).bind("touchstart", function(e) {
          e.preventDefault();
          s._xy()._touch(e);
        });
        this.listen();
      } else {
        this.$.attr('readonly', 'readonly');
      }
      if (this.relative) {
        $(window).resize(function() {
          s._carve().init();
          s._draw();
        });
      }
      return this;
    };
    this._configure = function() {
      if (this.o.draw) this.dH = this.o.draw;
      if (this.o.change) this.cH = this.o.change;
      if (this.o.cancel) this.eH = this.o.cancel;
      if (this.o.release) this.rH = this.o.release;
      if (this.o.displayPrevious) {
        this.pColor = this.h2rgba(this.o.fgColor, "0.4");
        this.fgColor = this.h2rgba(this.o.fgColor, "0.6");
      } else {
        this.fgColor = this.o.fgColor;
      }
      return this;
    };
    this._clear = function() {
      this.$c[0].width = this.$c[0].width;
    };
    this._validate = function(v) {
      return (~~(((v < 0) ? -0.5 : 0.5) + (v / this.o.step))) * this.o.step;
    };
    this.listen = function() {};
    this.extend = function() {};
    this.init = function() {};
    this.change = function(v) {};
    this.val = function(v) {};
    this.xy2val = function(x, y) {};
    this.draw = function() {};
    this.clear = function() {
      this._clear();
    };
    this.h2rgba = function(h, a) {
      var rgb;
      h = h.substring(1, 7)
      rgb = [parseInt(h.substring(0, 2), 16), parseInt(h.substring(2, 4), 16), parseInt(h.substring(4, 6), 16)];
      return "rgba(" + rgb[0] + "," + rgb[1] + "," + rgb[2] + "," + a + ")";
    };
    this.copy = function(f, t) {
      for (var i in f) {
        t[i] = f[i];
      }
    };
  };
  k.Dial = function() {
    k.o.call(this);
    this.startAngle = null;
    this.xy = null;
    this.radius = null;
    this.lineWidth = null;
    this.cursorExt = null;
    this.w2 = null;
    this.PI2 = 2 * Math.PI;
    this.extend = function() {
      this.o = $.extend({
        bgColor: this.$.data('bgcolor') || '#EEEEEE',
        angleOffset: this.$.data('angleoffset') || 0,
        angleArc: this.$.data('anglearc') || 360,
        inline: true
      }, this.o);
    };
    this.val = function(v, triggerRelease) {
      if (null != v) {
        v = this.o.parse(v);
        if (triggerRelease !== false && (v != this.v) && this.rH && (this.rH(v) === false)) return;
        this.cv = this.o.stopper ? max(min(v, this.o.max), this.o.min) : v;
        this.v = this.cv;
        this.$.val(this.o.format(this.v));
        this._draw();
      } else {
        return this.v;
      }
    };
    this.xy2val = function(x, y) {
      var a, ret;
      a = Math.atan2(x - (this.x + this.w2), -(y - this.y - this.w2)) - this.angleOffset;
      if (this.o.flip) {
        a = this.angleArc - a - this.PI2;
      }
      if (this.angleArc != this.PI2 && (a < 0) && (a > -0.5)) {
        a = 0;
      } else if (a < 0) {
        a += this.PI2;
      }
      ret = ~~(0.5 + (a * (this.o.max - this.o.min) / this.angleArc)) +
        this.o.min;
      this.o.stopper && (ret = max(min(ret, this.o.max), this.o.min));
      return ret;
    };
    this.listen = function() {
      var s = this,
        mwTimerStop, mwTimerRelease, mw = function(e) {
          e.preventDefault();
          var ori = e.originalEvent,
            deltaX = ori.detail || ori.wheelDeltaX,
            deltaY = ori.detail || ori.wheelDeltaY,
            v = s._validate(s.o.parse(s.$.val())) +
            (deltaX > 0 || deltaY > 0 ? s.o.step : deltaX < 0 || deltaY < 0 ? -s.o.step : 0);
          v = max(min(v, s.o.max), s.o.min);
          s.val(v, false);
          if (s.rH) {
            clearTimeout(mwTimerStop);
            mwTimerStop = setTimeout(function() {
              s.rH(v);
              mwTimerStop = null;
            }, 100);
            if (!mwTimerRelease) {
              mwTimerRelease = setTimeout(function() {
                if (mwTimerStop) s.rH(v);
                mwTimerRelease = null;
              }, 200);
            }
          }
        },
        kval, to, m = 1,
        kv = {
          37: -s.o.step,
          38: s.o.step,
          39: s.o.step,
          40: -s.o.step
        };
      this.$.bind("keydown", function(e) {
        var kc = e.keyCode;
        if (kc >= 96 && kc <= 105) {
          kc = e.keyCode = kc - 48;
        }
        kval = parseInt(String.fromCharCode(kc));
        if (isNaN(kval)) {
          (kc !== 13) && (kc !== 8) && (kc !== 9) && (kc !== 189) && (kc !== 190 || s.$.val().match(/\./)) && e.preventDefault();
          if ($.inArray(kc, [37, 38, 39, 40]) > -1) {
            e.preventDefault();
            var v = s.o.parse(s.$.val()) + kv[kc] * m;
            s.o.stopper && (v = max(min(v, s.o.max), s.o.min));
            s.change(v);
            s._draw();
            to = window.setTimeout(function() {
              m *= 2;
            }, 30);
          }
        }
      }).bind("keyup", function(e) {
        if (isNaN(kval)) {
          if (to) {
            window.clearTimeout(to);
            to = null;
            m = 1;
            s.val(s.$.val());
          }
        } else {
          (s.$.val() > s.o.max && s.$.val(s.o.max)) || (s.$.val() < s.o.min && s.$.val(s.o.min));
        }
      });
      this.$c.bind("mousewheel DOMMouseScroll", mw);
      this.$.bind("mousewheel DOMMouseScroll", mw)
    };
    this.init = function() {
      if (this.v < this.o.min || this.v > this.o.max) this.v = this.o.min;
      this.$.val(this.v);
      this.w2 = this.w / 2;
      this.cursorExt = this.o.cursor / 100;
      this.xy = this.w2 * this.scale;
      this.lineWidth = this.xy * this.o.thickness;
      this.lineCap = this.o.lineCap;
      this.radius = this.xy - this.lineWidth / 2;
      this.o.angleOffset && (this.o.angleOffset = isNaN(this.o.angleOffset) ? 0 : this.o.angleOffset);
      this.o.angleArc && (this.o.angleArc = isNaN(this.o.angleArc) ? this.PI2 : this.o.angleArc);
      this.angleOffset = this.o.angleOffset * Math.PI / 180;
      this.angleArc = this.o.angleArc * Math.PI / 180;
      this.startAngle = 1.5 * Math.PI + this.angleOffset;
      this.endAngle = 1.5 * Math.PI + this.angleOffset + this.angleArc;
      var s = max(String(Math.abs(this.o.max)).length, String(Math.abs(this.o.min)).length, 2) + 2;
      this.o.displayInput && this.i.css({
        'width': ((this.w / 2 + 4) >> 0) + 'px',
        'height': ((this.w / 3) >> 0) + 'px',
        'position': 'absolute',
        'vertical-align': 'middle',
        'margin-top': ((this.w / 3) >> 0) + 'px',
        'margin-left': '-' + ((this.w * 3 / 4 + 2) >> 0) + 'px',
        'border': 0,
        'background': 'none',
        'font': this.o.fontWeight + ' ' + ((this.w / s) >> 0) + 'px ' + this.o.font,
        'text-align': 'center',
        'color': this.o.inputColor || this.o.fgColor,
        'padding': '0px',
        '-webkit-appearance': 'none'
      }) || this.i.css({
        'width': '0px',
        'visibility': 'hidden'
      });
    };
    this.change = function(v) {
      this.cv = v;
      this.$.val(this.o.format(v));
    };
    this.angle = function(v) {
      return (v - this.o.min) * this.angleArc / (this.o.max - this.o.min);
    };
    this.arc = function(v) {
      var sa, ea;
      v = this.angle(v);
      if (this.o.flip) {
        sa = this.endAngle + 0.00001;
        ea = sa - v - 0.00001;
      } else {
        sa = this.startAngle - 0.00001;
        ea = sa + v + 0.00001;
      }
      this.o.cursor && (sa = ea - this.cursorExt) && (ea = ea + this.cursorExt);
      return {
        s: sa,
        e: ea,
        d: this.o.flip && !this.o.cursor
      };
    };
    this.draw = function() {
      var c = this.g,
        a = this.arc(this.cv),
        pa, r = 1;
      c.lineWidth = this.lineWidth;
      c.lineCap = this.lineCap;
      c.beginPath();
      c.strokeStyle = this.o.bgColor;
      c.arc(this.xy, this.xy, this.radius, this.endAngle - 0.00001, this.startAngle + 0.00001, true);
      c.stroke();
      if (this.o.displayPrevious) {
        pa = this.arc(this.v);
        c.beginPath();
        c.strokeStyle = this.pColor;
        c.arc(this.xy, this.xy, this.radius, pa.s, pa.e, pa.d);
        c.stroke();
        r = (this.cv == this.v);
      }
      c.beginPath();
      c.strokeStyle = r ? this.o.fgColor : this.fgColor;
      c.arc(this.xy, this.xy, this.radius, a.s, a.e, a.d);
      c.stroke();
    };
    this.cancel = function() {
      this.val(this.v);
    };
  };
  $.fn.dial = $.fn.knob = function(o) {
    return this.each(function() {
      var d = new k.Dial();
      d.o = o;
      d.$ = $(this);
      d.run();
    }).parent();
  };
}));;
/*!
 * Masonry PACKAGED v3.3.2
 * Cascading grid layout library
 * http://masonry.desandro.com
 * MIT License
 * by David DeSandro
 */
! function(a) {
  function b() {}

  function c(a) {
    function c(b) {
      b.prototype.option || (b.prototype.option = function(b) {
        a.isPlainObject(b) && (this.options = a.extend(!0, this.options, b))
      })
    }

    function e(b, c) {
      a.fn[b] = function(e) {
        if ("string" == typeof e) {
          for (var g = d.call(arguments, 1), h = 0, i = this.length; i > h; h++) {
            var j = this[h],
              k = a.data(j, b);
            if (k)
              if (a.isFunction(k[e]) && "_" !== e.charAt(0)) {
                var l = k[e].apply(k, g);
                if (void 0 !== l) return l
              } else f("no such method '" + e + "' for " + b + " instance");
            else f("cannot call methods on " + b + " prior to initialization; attempted to call '" + e + "'")
          }
          return this
        }
        return this.each(function() {
          var d = a.data(this, b);
          d ? (d.option(e), d._init()) : (d = new c(this, e), a.data(this, b, d))
        })
      }
    }
    if (a) {
      var f = "undefined" == typeof console ? b : function(a) {
        console.error(a)
      };
      return a.bridget = function(a, b) {
        c(b), e(a, b)
      }, a.bridget
    }
  }
  var d = Array.prototype.slice;
  "function" == typeof define && define.amd ? define("jquery-bridget/jquery.bridget", ["jquery"], c) : c("object" == typeof exports ? require("jquery") : a.jQuery)
}(window),
function(a) {
  function b(b) {
    var c = a.event;
    return c.target = c.target || c.srcElement || b, c
  }
  var c = document.documentElement,
    d = function() {};
  c.addEventListener ? d = function(a, b, c) {
    a.addEventListener(b, c, !1)
  } : c.attachEvent && (d = function(a, c, d) {
    a[c + d] = d.handleEvent ? function() {
      var c = b(a);
      d.handleEvent.call(d, c)
    } : function() {
      var c = b(a);
      d.call(a, c)
    }, a.attachEvent("on" + c, a[c + d])
  });
  var e = function() {};
  c.removeEventListener ? e = function(a, b, c) {
    a.removeEventListener(b, c, !1)
  } : c.detachEvent && (e = function(a, b, c) {
    a.detachEvent("on" + b, a[b + c]);
    try {
      delete a[b + c]
    } catch (d) {
      a[b + c] = void 0
    }
  });
  var f = {
    bind: d,
    unbind: e
  };
  "function" == typeof define && define.amd ? define("eventie/eventie", f) : "object" == typeof exports ? module.exports = f : a.eventie = f
}(window),
function() {
  function a() {}

  function b(a, b) {
    for (var c = a.length; c--;)
      if (a[c].listener === b) return c;
    return -1
  }

  function c(a) {
    return function() {
      return this[a].apply(this, arguments)
    }
  }
  var d = a.prototype,
    e = this,
    f = e.EventEmitter;
  d.getListeners = function(a) {
    var b, c, d = this._getEvents();
    if (a instanceof RegExp) {
      b = {};
      for (c in d) d.hasOwnProperty(c) && a.test(c) && (b[c] = d[c])
    } else b = d[a] || (d[a] = []);
    return b
  }, d.flattenListeners = function(a) {
    var b, c = [];
    for (b = 0; b < a.length; b += 1) c.push(a[b].listener);
    return c
  }, d.getListenersAsObject = function(a) {
    var b, c = this.getListeners(a);
    return c instanceof Array && (b = {}, b[a] = c), b || c
  }, d.addListener = function(a, c) {
    var d, e = this.getListenersAsObject(a),
      f = "object" == typeof c;
    for (d in e) e.hasOwnProperty(d) && -1 === b(e[d], c) && e[d].push(f ? c : {
      listener: c,
      once: !1
    });
    return this
  }, d.on = c("addListener"), d.addOnceListener = function(a, b) {
    return this.addListener(a, {
      listener: b,
      once: !0
    })
  }, d.once = c("addOnceListener"), d.defineEvent = function(a) {
    return this.getListeners(a), this
  }, d.defineEvents = function(a) {
    for (var b = 0; b < a.length; b += 1) this.defineEvent(a[b]);
    return this
  }, d.removeListener = function(a, c) {
    var d, e, f = this.getListenersAsObject(a);
    for (e in f) f.hasOwnProperty(e) && (d = b(f[e], c), -1 !== d && f[e].splice(d, 1));
    return this
  }, d.off = c("removeListener"), d.addListeners = function(a, b) {
    return this.manipulateListeners(!1, a, b)
  }, d.removeListeners = function(a, b) {
    return this.manipulateListeners(!0, a, b)
  }, d.manipulateListeners = function(a, b, c) {
    var d, e, f = a ? this.removeListener : this.addListener,
      g = a ? this.removeListeners : this.addListeners;
    if ("object" != typeof b || b instanceof RegExp)
      for (d = c.length; d--;) f.call(this, b, c[d]);
    else
      for (d in b) b.hasOwnProperty(d) && (e = b[d]) && ("function" == typeof e ? f.call(this, d, e) : g.call(this, d, e));
    return this
  }, d.removeEvent = function(a) {
    var b, c = typeof a,
      d = this._getEvents();
    if ("string" === c) delete d[a];
    else if (a instanceof RegExp)
      for (b in d) d.hasOwnProperty(b) && a.test(b) && delete d[b];
    else delete this._events;
    return this
  }, d.removeAllListeners = c("removeEvent"), d.emitEvent = function(a, b) {
    var c, d, e, f, g = this.getListenersAsObject(a);
    for (e in g)
      if (g.hasOwnProperty(e))
        for (d = g[e].length; d--;) c = g[e][d], c.once === !0 && this.removeListener(a, c.listener), f = c.listener.apply(this, b || []), f === this._getOnceReturnValue() && this.removeListener(a, c.listener);
    return this
  }, d.trigger = c("emitEvent"), d.emit = function(a) {
    var b = Array.prototype.slice.call(arguments, 1);
    return this.emitEvent(a, b)
  }, d.setOnceReturnValue = function(a) {
    return this._onceReturnValue = a, this
  }, d._getOnceReturnValue = function() {
    return this.hasOwnProperty("_onceReturnValue") ? this._onceReturnValue : !0
  }, d._getEvents = function() {
    return this._events || (this._events = {})
  }, a.noConflict = function() {
    return e.EventEmitter = f, a
  }, "function" == typeof define && define.amd ? define("eventEmitter/EventEmitter", [], function() {
    return a
  }) : "object" == typeof module && module.exports ? module.exports = a : e.EventEmitter = a
}.call(this),
  function(a) {
    function b(a) {
      if (a) {
        if ("string" == typeof d[a]) return a;
        a = a.charAt(0).toUpperCase() + a.slice(1);
        for (var b, e = 0, f = c.length; f > e; e++)
          if (b = c[e] + a, "string" == typeof d[b]) return b
      }
    }
    var c = "Webkit Moz ms Ms O".split(" "),
      d = document.documentElement.style;
    "function" == typeof define && define.amd ? define("get-style-property/get-style-property", [], function() {
      return b
    }) : "object" == typeof exports ? module.exports = b : a.getStyleProperty = b
  }(window),
  function(a) {
    function b(a) {
      var b = parseFloat(a),
        c = -1 === a.indexOf("%") && !isNaN(b);
      return c && b
    }

    function c() {}

    function d() {
      for (var a = {
          width: 0,
          height: 0,
          innerWidth: 0,
          innerHeight: 0,
          outerWidth: 0,
          outerHeight: 0
        }, b = 0, c = g.length; c > b; b++) {
        var d = g[b];
        a[d] = 0
      }
      return a
    }

    function e(c) {
      function e() {
        if (!m) {
          m = !0;
          var d = a.getComputedStyle;
          if (j = function() {
              var a = d ? function(a) {
                return d(a, null)
              } : function(a) {
                return a.currentStyle
              };
              return function(b) {
                var c = a(b);
                return c || f("Style returned " + c + ". Are you running this code in a hidden iframe on Firefox? See http://bit.ly/getsizebug1"), c
              }
            }(), k = c("boxSizing")) {
            var e = document.createElement("div");
            e.style.width = "200px", e.style.padding = "1px 2px 3px 4px", e.style.borderStyle = "solid", e.style.borderWidth = "1px 2px 3px 4px", e.style[k] = "border-box";
            var g = document.body || document.documentElement;
            g.appendChild(e);
            var h = j(e);
            l = 200 === b(h.width), g.removeChild(e)
          }
        }
      }

      function h(a) {
        if (e(), "string" == typeof a && (a = document.querySelector(a)), a && "object" == typeof a && a.nodeType) {
          var c = j(a);
          if ("none" === c.display) return d();
          var f = {};
          f.width = a.offsetWidth, f.height = a.offsetHeight;
          for (var h = f.isBorderBox = !(!k || !c[k] || "border-box" !== c[k]), m = 0, n = g.length; n > m; m++) {
            var o = g[m],
              p = c[o];
            p = i(a, p);
            var q = parseFloat(p);
            f[o] = isNaN(q) ? 0 : q
          }
          var r = f.paddingLeft + f.paddingRight,
            s = f.paddingTop + f.paddingBottom,
            t = f.marginLeft + f.marginRight,
            u = f.marginTop + f.marginBottom,
            v = f.borderLeftWidth + f.borderRightWidth,
            w = f.borderTopWidth + f.borderBottomWidth,
            x = h && l,
            y = b(c.width);
          y !== !1 && (f.width = y + (x ? 0 : r + v));
          var z = b(c.height);
          return z !== !1 && (f.height = z + (x ? 0 : s + w)), f.innerWidth = f.width - (r + v), f.innerHeight = f.height - (s + w), f.outerWidth = f.width + t, f.outerHeight = f.height + u, f
        }
      }

      function i(b, c) {
        if (a.getComputedStyle || -1 === c.indexOf("%")) return c;
        var d = b.style,
          e = d.left,
          f = b.runtimeStyle,
          g = f && f.left;
        return g && (f.left = b.currentStyle.left), d.left = c, c = d.pixelLeft, d.left = e, g && (f.left = g), c
      }
      var j, k, l, m = !1;
      return h
    }
    var f = "undefined" == typeof console ? c : function(a) {
        console.error(a)
      },
      g = ["paddingLeft", "paddingRight", "paddingTop", "paddingBottom", "marginLeft", "marginRight", "marginTop", "marginBottom", "borderLeftWidth", "borderRightWidth", "borderTopWidth", "borderBottomWidth"];
    "function" == typeof define && define.amd ? define("get-size/get-size", ["get-style-property/get-style-property"], e) : "object" == typeof exports ? module.exports = e(require("desandro-get-style-property")) : a.getSize = e(a.getStyleProperty)
  }(window),
  function(a) {
    function b(a) {
      "function" == typeof a && (b.isReady ? a() : g.push(a))
    }

    function c(a) {
      var c = "readystatechange" === a.type && "complete" !== f.readyState;
      b.isReady || c || d()
    }

    function d() {
      b.isReady = !0;
      for (var a = 0, c = g.length; c > a; a++) {
        var d = g[a];
        d()
      }
    }

    function e(e) {
      return "complete" === f.readyState ? d() : (e.bind(f, "DOMContentLoaded", c), e.bind(f, "readystatechange", c), e.bind(a, "load", c)), b
    }
    var f = a.document,
      g = [];
    b.isReady = !1, "function" == typeof define && define.amd ? define("doc-ready/doc-ready", ["eventie/eventie"], e) : "object" == typeof exports ? module.exports = e(require("eventie")) : a.docReady = e(a.eventie)
  }(window),
  function(a) {
    function b(a, b) {
      return a[g](b)
    }

    function c(a) {
      if (!a.parentNode) {
        var b = document.createDocumentFragment();
        b.appendChild(a)
      }
    }

    function d(a, b) {
      c(a);
      for (var d = a.parentNode.querySelectorAll(b), e = 0, f = d.length; f > e; e++)
        if (d[e] === a) return !0;
      return !1
    }

    function e(a, d) {
      return c(a), b(a, d)
    }
    var f, g = function() {
      if (a.matches) return "matches";
      if (a.matchesSelector) return "matchesSelector";
      for (var b = ["webkit", "moz", "ms", "o"], c = 0, d = b.length; d > c; c++) {
        var e = b[c],
          f = e + "MatchesSelector";
        if (a[f]) return f
      }
    }();
    if (g) {
      var h = document.createElement("div"),
        i = b(h, "div");
      f = i ? b : e
    } else f = d;
    "function" == typeof define && define.amd ? define("matches-selector/matches-selector", [], function() {
      return f
    }) : "object" == typeof exports ? module.exports = f : window.matchesSelector = f
  }(Element.prototype),
  function(a, b) {
    "function" == typeof define && define.amd ? define("fizzy-ui-utils/utils", ["doc-ready/doc-ready", "matches-selector/matches-selector"], function(c, d) {
      return b(a, c, d)
    }) : "object" == typeof exports ? module.exports = b(a, require("doc-ready"), require("desandro-matches-selector")) : a.fizzyUIUtils = b(a, a.docReady, a.matchesSelector)
  }(window, function(a, b, c) {
    var d = {};
    d.extend = function(a, b) {
      for (var c in b) a[c] = b[c];
      return a
    }, d.modulo = function(a, b) {
      return (a % b + b) % b
    };
    var e = Object.prototype.toString;
    d.isArray = function(a) {
      return "[object Array]" == e.call(a)
    }, d.makeArray = function(a) {
      var b = [];
      if (d.isArray(a)) b = a;
      else if (a && "number" == typeof a.length)
        for (var c = 0, e = a.length; e > c; c++) b.push(a[c]);
      else b.push(a);
      return b
    }, d.indexOf = Array.prototype.indexOf ? function(a, b) {
      return a.indexOf(b)
    } : function(a, b) {
      for (var c = 0, d = a.length; d > c; c++)
        if (a[c] === b) return c;
      return -1
    }, d.removeFrom = function(a, b) {
      var c = d.indexOf(a, b); - 1 != c && a.splice(c, 1)
    }, d.isElement = "function" == typeof HTMLElement || "object" == typeof HTMLElement ? function(a) {
      return a instanceof HTMLElement
    } : function(a) {
      return a && "object" == typeof a && 1 == a.nodeType && "string" == typeof a.nodeName
    }, d.setText = function() {
      function a(a, c) {
        b = b || (void 0 !== document.documentElement.textContent ? "textContent" : "innerText"), a[b] = c
      }
      var b;
      return a
    }(), d.getParent = function(a, b) {
      for (; a != document.body;)
        if (a = a.parentNode, c(a, b)) return a
    }, d.getQueryElement = function(a) {
      return "string" == typeof a ? document.querySelector(a) : a
    }, d.handleEvent = function(a) {
      var b = "on" + a.type;
      this[b] && this[b](a)
    }, d.filterFindElements = function(a, b) {
      a = d.makeArray(a);
      for (var e = [], f = 0, g = a.length; g > f; f++) {
        var h = a[f];
        if (d.isElement(h))
          if (b) {
            c(h, b) && e.push(h);
            for (var i = h.querySelectorAll(b), j = 0, k = i.length; k > j; j++) e.push(i[j])
          } else e.push(h)
      }
      return e
    }, d.debounceMethod = function(a, b, c) {
      var d = a.prototype[b],
        e = b + "Timeout";
      a.prototype[b] = function() {
        var a = this[e];
        a && clearTimeout(a);
        var b = arguments,
          f = this;
        this[e] = setTimeout(function() {
          d.apply(f, b), delete f[e]
        }, c || 100)
      }
    }, d.toDashed = function(a) {
      return a.replace(/(.)([A-Z])/g, function(a, b, c) {
        return b + "-" + c
      }).toLowerCase()
    };
    var f = a.console;
    return d.htmlInit = function(c, e) {
      b(function() {
        for (var b = d.toDashed(e), g = document.querySelectorAll(".js-" + b), h = "data-" + b + "-options", i = 0, j = g.length; j > i; i++) {
          var k, l = g[i],
            m = l.getAttribute(h);
          try {
            k = m && JSON.parse(m)
          } catch (n) {
            f && f.error("Error parsing " + h + " on " + l.nodeName.toLowerCase() + (l.id ? "#" + l.id : "") + ": " + n);
            continue
          }
          var o = new c(l, k),
            p = a.jQuery;
          p && p.data(l, e, o)
        }
      })
    }, d
  }),
  function(a, b) {
    "function" == typeof define && define.amd ? define("outlayer/item", ["eventEmitter/EventEmitter", "get-size/get-size", "get-style-property/get-style-property", "fizzy-ui-utils/utils"], function(c, d, e, f) {
      return b(a, c, d, e, f)
    }) : "object" == typeof exports ? module.exports = b(a, require("wolfy87-eventemitter"), require("get-size"), require("desandro-get-style-property"), require("fizzy-ui-utils")) : (a.Outlayer = {}, a.Outlayer.Item = b(a, a.EventEmitter, a.getSize, a.getStyleProperty, a.fizzyUIUtils))
  }(window, function(a, b, c, d, e) {
    function f(a) {
      for (var b in a) return !1;
      return b = null, !0
    }

    function g(a, b) {
      a && (this.element = a, this.layout = b, this.position = {
        x: 0,
        y: 0
      }, this._create())
    }

    function h(a) {
      return a.replace(/([A-Z])/g, function(a) {
        return "-" + a.toLowerCase()
      })
    }
    var i = a.getComputedStyle,
      j = i ? function(a) {
        return i(a, null)
      } : function(a) {
        return a.currentStyle
      },
      k = d("transition"),
      l = d("transform"),
      m = k && l,
      n = !!d("perspective"),
      o = {
        WebkitTransition: "webkitTransitionEnd",
        MozTransition: "transitionend",
        OTransition: "otransitionend",
        transition: "transitionend"
      } [k],
      p = ["transform", "transition", "transitionDuration", "transitionProperty"],
      q = function() {
        for (var a = {}, b = 0, c = p.length; c > b; b++) {
          var e = p[b],
            f = d(e);
          f && f !== e && (a[e] = f)
        }
        return a
      }();
    e.extend(g.prototype, b.prototype), g.prototype._create = function() {
      this._transn = {
        ingProperties: {},
        clean: {},
        onEnd: {}
      }, this.css({
        position: "absolute"
      })
    }, g.prototype.handleEvent = function(a) {
      var b = "on" + a.type;
      this[b] && this[b](a)
    }, g.prototype.getSize = function() {
      this.size = c(this.element)
    }, g.prototype.css = function(a) {
      var b = this.element.style;
      for (var c in a) {
        var d = q[c] || c;
        b[d] = a[c]
      }
    }, g.prototype.getPosition = function() {
      var a = j(this.element),
        b = this.layout.options,
        c = b.isOriginLeft,
        d = b.isOriginTop,
        e = a[c ? "left" : "right"],
        f = a[d ? "top" : "bottom"],
        g = this.layout.size,
        h = -1 != e.indexOf("%") ? parseFloat(e) / 100 * g.width : parseInt(e, 10),
        i = -1 != f.indexOf("%") ? parseFloat(f) / 100 * g.height : parseInt(f, 10);
      h = isNaN(h) ? 0 : h, i = isNaN(i) ? 0 : i, h -= c ? g.paddingLeft : g.paddingRight, i -= d ? g.paddingTop : g.paddingBottom, this.position.x = h, this.position.y = i
    }, g.prototype.layoutPosition = function() {
      var a = this.layout.size,
        b = this.layout.options,
        c = {},
        d = b.isOriginLeft ? "paddingLeft" : "paddingRight",
        e = b.isOriginLeft ? "left" : "right",
        f = b.isOriginLeft ? "right" : "left",
        g = this.position.x + a[d];
      c[e] = this.getXValue(g), c[f] = "";
      var h = b.isOriginTop ? "paddingTop" : "paddingBottom",
        i = b.isOriginTop ? "top" : "bottom",
        j = b.isOriginTop ? "bottom" : "top",
        k = this.position.y + a[h];
      c[i] = this.getYValue(k), c[j] = "", this.css(c), this.emitEvent("layout", [this])
    }, g.prototype.getXValue = function(a) {
      var b = this.layout.options;
      return b.percentPosition && !b.isHorizontal ? a / this.layout.size.width * 100 + "%" : a + "px"
    }, g.prototype.getYValue = function(a) {
      var b = this.layout.options;
      return b.percentPosition && b.isHorizontal ? a / this.layout.size.height * 100 + "%" : a + "px"
    }, g.prototype._transitionTo = function(a, b) {
      this.getPosition();
      var c = this.position.x,
        d = this.position.y,
        e = parseInt(a, 10),
        f = parseInt(b, 10),
        g = e === this.position.x && f === this.position.y;
      if (this.setPosition(a, b), g && !this.isTransitioning) return void this.layoutPosition();
      var h = a - c,
        i = b - d,
        j = {};
      j.transform = this.getTranslate(h, i), this.transition({
        to: j,
        onTransitionEnd: {
          transform: this.layoutPosition
        },
        isCleaning: !0
      })
    }, g.prototype.getTranslate = function(a, b) {
      var c = this.layout.options;
      return a = c.isOriginLeft ? a : -a, b = c.isOriginTop ? b : -b, n ? "translate3d(" + a + "px, " + b + "px, 0)" : "translate(" + a + "px, " + b + "px)"
    }, g.prototype.goTo = function(a, b) {
      this.setPosition(a, b), this.layoutPosition()
    }, g.prototype.moveTo = m ? g.prototype._transitionTo : g.prototype.goTo, g.prototype.setPosition = function(a, b) {
      this.position.x = parseInt(a, 10), this.position.y = parseInt(b, 10)
    }, g.prototype._nonTransition = function(a) {
      this.css(a.to), a.isCleaning && this._removeStyles(a.to);
      for (var b in a.onTransitionEnd) a.onTransitionEnd[b].call(this)
    }, g.prototype._transition = function(a) {
      if (!parseFloat(this.layout.options.transitionDuration)) return void this._nonTransition(a);
      var b = this._transn;
      for (var c in a.onTransitionEnd) b.onEnd[c] = a.onTransitionEnd[c];
      for (c in a.to) b.ingProperties[c] = !0, a.isCleaning && (b.clean[c] = !0);
      if (a.from) {
        this.css(a.from);
        var d = this.element.offsetHeight;
        d = null
      }
      this.enableTransition(a.to), this.css(a.to), this.isTransitioning = !0
    };
    var r = "opacity," + h(q.transform || "transform");
    g.prototype.enableTransition = function() {
      this.isTransitioning || (this.css({
        transitionProperty: r,
        transitionDuration: this.layout.options.transitionDuration
      }), this.element.addEventListener(o, this, !1))
    }, g.prototype.transition = g.prototype[k ? "_transition" : "_nonTransition"], g.prototype.onwebkitTransitionEnd = function(a) {
      this.ontransitionend(a)
    }, g.prototype.onotransitionend = function(a) {
      this.ontransitionend(a)
    };
    var s = {
      "-webkit-transform": "transform",
      "-moz-transform": "transform",
      "-o-transform": "transform"
    };
    g.prototype.ontransitionend = function(a) {
      if (a.target === this.element) {
        var b = this._transn,
          c = s[a.propertyName] || a.propertyName;
        if (delete b.ingProperties[c], f(b.ingProperties) && this.disableTransition(), c in b.clean && (this.element.style[a.propertyName] = "", delete b.clean[c]), c in b.onEnd) {
          var d = b.onEnd[c];
          d.call(this), delete b.onEnd[c]
        }
        this.emitEvent("transitionEnd", [this])
      }
    }, g.prototype.disableTransition = function() {
      this.removeTransitionStyles(), this.element.removeEventListener(o, this, !1), this.isTransitioning = !1
    }, g.prototype._removeStyles = function(a) {
      var b = {};
      for (var c in a) b[c] = "";
      this.css(b)
    };
    var t = {
      transitionProperty: "",
      transitionDuration: ""
    };
    return g.prototype.removeTransitionStyles = function() {
      this.css(t)
    }, g.prototype.removeElem = function() {
      this.element.parentNode.removeChild(this.element), this.css({
        display: ""
      }), this.emitEvent("remove", [this])
    }, g.prototype.remove = function() {
      if (!k || !parseFloat(this.layout.options.transitionDuration)) return void this.removeElem();
      var a = this;
      this.once("transitionEnd", function() {
        a.removeElem()
      }), this.hide()
    }, g.prototype.reveal = function() {
      delete this.isHidden, this.css({
        display: ""
      });
      var a = this.layout.options,
        b = {},
        c = this.getHideRevealTransitionEndProperty("visibleStyle");
      b[c] = this.onRevealTransitionEnd, this.transition({
        from: a.hiddenStyle,
        to: a.visibleStyle,
        isCleaning: !0,
        onTransitionEnd: b
      })
    }, g.prototype.onRevealTransitionEnd = function() {
      this.isHidden || this.emitEvent("reveal")
    }, g.prototype.getHideRevealTransitionEndProperty = function(a) {
      var b = this.layout.options[a];
      if (b.opacity) return "opacity";
      for (var c in b) return c
    }, g.prototype.hide = function() {
      this.isHidden = !0, this.css({
        display: ""
      });
      var a = this.layout.options,
        b = {},
        c = this.getHideRevealTransitionEndProperty("hiddenStyle");
      b[c] = this.onHideTransitionEnd, this.transition({
        from: a.visibleStyle,
        to: a.hiddenStyle,
        isCleaning: !0,
        onTransitionEnd: b
      })
    }, g.prototype.onHideTransitionEnd = function() {
      this.isHidden && (this.css({
        display: "none"
      }), this.emitEvent("hide"))
    }, g.prototype.destroy = function() {
      this.css({
        position: "",
        left: "",
        right: "",
        top: "",
        bottom: "",
        transition: "",
        transform: ""
      })
    }, g
  }),
  function(a, b) {
    "function" == typeof define && define.amd ? define("outlayer/outlayer", ["eventie/eventie", "eventEmitter/EventEmitter", "get-size/get-size", "fizzy-ui-utils/utils", "./item"], function(c, d, e, f, g) {
      return b(a, c, d, e, f, g)
    }) : "object" == typeof exports ? module.exports = b(a, require("eventie"), require("wolfy87-eventemitter"), require("get-size"), require("fizzy-ui-utils"), require("./item")) : a.Outlayer = b(a, a.eventie, a.EventEmitter, a.getSize, a.fizzyUIUtils, a.Outlayer.Item)
  }(window, function(a, b, c, d, e, f) {
    function g(a, b) {
      var c = e.getQueryElement(a);
      if (!c) return void(h && h.error("Bad element for " + this.constructor.namespace + ": " + (c || a)));
      this.element = c, i && (this.$element = i(this.element)), this.options = e.extend({}, this.constructor.defaults), this.option(b);
      var d = ++k;
      this.element.outlayerGUID = d, l[d] = this, this._create(), this.options.isInitLayout && this.layout()
    }
    var h = a.console,
      i = a.jQuery,
      j = function() {},
      k = 0,
      l = {};
    return g.namespace = "outlayer", g.Item = f, g.defaults = {
      containerStyle: {
        position: "relative"
      },
      isInitLayout: !0,
      isOriginLeft: !0,
      isOriginTop: !0,
      isResizeBound: !0,
      isResizingContainer: !0,
      transitionDuration: "0.4s",
      hiddenStyle: {
        opacity: 0,
        transform: "scale(0.001)"
      },
      visibleStyle: {
        opacity: 1,
        transform: "scale(1)"
      }
    }, e.extend(g.prototype, c.prototype), g.prototype.option = function(a) {
      e.extend(this.options, a)
    }, g.prototype._create = function() {
      this.reloadItems(), this.stamps = [], this.stamp(this.options.stamp), e.extend(this.element.style, this.options.containerStyle), this.options.isResizeBound && this.bindResize()
    }, g.prototype.reloadItems = function() {
      this.items = this._itemize(this.element.children)
    }, g.prototype._itemize = function(a) {
      for (var b = this._filterFindItemElements(a), c = this.constructor.Item, d = [], e = 0, f = b.length; f > e; e++) {
        var g = b[e],
          h = new c(g, this);
        d.push(h)
      }
      return d
    }, g.prototype._filterFindItemElements = function(a) {
      return e.filterFindElements(a, this.options.itemSelector)
    }, g.prototype.getItemElements = function() {
      for (var a = [], b = 0, c = this.items.length; c > b; b++) a.push(this.items[b].element);
      return a
    }, g.prototype.layout = function() {
      this._resetLayout(), this._manageStamps();
      var a = void 0 !== this.options.isLayoutInstant ? this.options.isLayoutInstant : !this._isLayoutInited;
      this.layoutItems(this.items, a), this._isLayoutInited = !0
    }, g.prototype._init = g.prototype.layout, g.prototype._resetLayout = function() {
      this.getSize()
    }, g.prototype.getSize = function() {
      this.size = d(this.element)
    }, g.prototype._getMeasurement = function(a, b) {
      var c, f = this.options[a];
      f ? ("string" == typeof f ? c = this.element.querySelector(f) : e.isElement(f) && (c = f), this[a] = c ? d(c)[b] : f) : this[a] = 0
    }, g.prototype.layoutItems = function(a, b) {
      a = this._getItemsForLayout(a), this._layoutItems(a, b), this._postLayout()
    }, g.prototype._getItemsForLayout = function(a) {
      for (var b = [], c = 0, d = a.length; d > c; c++) {
        var e = a[c];
        e.isIgnored || b.push(e)
      }
      return b
    }, g.prototype._layoutItems = function(a, b) {
      if (this._emitCompleteOnItems("layout", a), a && a.length) {
        for (var c = [], d = 0, e = a.length; e > d; d++) {
          var f = a[d],
            g = this._getItemLayoutPosition(f);
          g.item = f, g.isInstant = b || f.isLayoutInstant, c.push(g)
        }
        this._processLayoutQueue(c)
      }
    }, g.prototype._getItemLayoutPosition = function() {
      return {
        x: 0,
        y: 0
      }
    }, g.prototype._processLayoutQueue = function(a) {
      for (var b = 0, c = a.length; c > b; b++) {
        var d = a[b];
        this._positionItem(d.item, d.x, d.y, d.isInstant)
      }
    }, g.prototype._positionItem = function(a, b, c, d) {
      d ? a.goTo(b, c) : a.moveTo(b, c)
    }, g.prototype._postLayout = function() {
      this.resizeContainer()
    }, g.prototype.resizeContainer = function() {
      if (this.options.isResizingContainer) {
        var a = this._getContainerSize();
        a && (this._setContainerMeasure(a.width, !0), this._setContainerMeasure(a.height, !1))
      }
    }, g.prototype._getContainerSize = j, g.prototype._setContainerMeasure = function(a, b) {
      if (void 0 !== a) {
        var c = this.size;
        c.isBorderBox && (a += b ? c.paddingLeft + c.paddingRight + c.borderLeftWidth + c.borderRightWidth : c.paddingBottom + c.paddingTop + c.borderTopWidth + c.borderBottomWidth), a = Math.max(a, 0), this.element.style[b ? "width" : "height"] = a + "px"
      }
    }, g.prototype._emitCompleteOnItems = function(a, b) {
      function c() {
        e.dispatchEvent(a + "Complete", null, [b])
      }

      function d() {
        g++, g === f && c()
      }
      var e = this,
        f = b.length;
      if (!b || !f) return void c();
      for (var g = 0, h = 0, i = b.length; i > h; h++) {
        var j = b[h];
        j.once(a, d)
      }
    }, g.prototype.dispatchEvent = function(a, b, c) {
      var d = b ? [b].concat(c) : c;
      if (this.emitEvent(a, d), i)
        if (this.$element = this.$element || i(this.element), b) {
          var e = i.Event(b);
          e.type = a, this.$element.trigger(e, c)
        } else this.$element.trigger(a, c)
    }, g.prototype.ignore = function(a) {
      var b = this.getItem(a);
      b && (b.isIgnored = !0)
    }, g.prototype.unignore = function(a) {
      var b = this.getItem(a);
      b && delete b.isIgnored
    }, g.prototype.stamp = function(a) {
      if (a = this._find(a)) {
        this.stamps = this.stamps.concat(a);
        for (var b = 0, c = a.length; c > b; b++) {
          var d = a[b];
          this.ignore(d)
        }
      }
    }, g.prototype.unstamp = function(a) {
      if (a = this._find(a))
        for (var b = 0, c = a.length; c > b; b++) {
          var d = a[b];
          e.removeFrom(this.stamps, d), this.unignore(d)
        }
    }, g.prototype._find = function(a) {
      return a ? ("string" == typeof a && (a = this.element.querySelectorAll(a)), a = e.makeArray(a)) : void 0
    }, g.prototype._manageStamps = function() {
      if (this.stamps && this.stamps.length) {
        this._getBoundingRect();
        for (var a = 0, b = this.stamps.length; b > a; a++) {
          var c = this.stamps[a];
          this._manageStamp(c)
        }
      }
    }, g.prototype._getBoundingRect = function() {
      var a = this.element.getBoundingClientRect(),
        b = this.size;
      this._boundingRect = {
        left: a.left + b.paddingLeft + b.borderLeftWidth,
        top: a.top + b.paddingTop + b.borderTopWidth,
        right: a.right - (b.paddingRight + b.borderRightWidth),
        bottom: a.bottom - (b.paddingBottom + b.borderBottomWidth)
      }
    }, g.prototype._manageStamp = j, g.prototype._getElementOffset = function(a) {
      var b = a.getBoundingClientRect(),
        c = this._boundingRect,
        e = d(a),
        f = {
          left: b.left - c.left - e.marginLeft,
          top: b.top - c.top - e.marginTop,
          right: c.right - b.right - e.marginRight,
          bottom: c.bottom - b.bottom - e.marginBottom
        };
      return f
    }, g.prototype.handleEvent = function(a) {
      var b = "on" + a.type;
      this[b] && this[b](a)
    }, g.prototype.bindResize = function() {
      this.isResizeBound || (b.bind(a, "resize", this), this.isResizeBound = !0)
    }, g.prototype.unbindResize = function() {
      this.isResizeBound && b.unbind(a, "resize", this), this.isResizeBound = !1
    }, g.prototype.onresize = function() {
      function a() {
        b.resize(), delete b.resizeTimeout
      }
      this.resizeTimeout && clearTimeout(this.resizeTimeout);
      var b = this;
      this.resizeTimeout = setTimeout(a, 100)
    }, g.prototype.resize = function() {
      this.isResizeBound && this.needsResizeLayout() && this.layout()
    }, g.prototype.needsResizeLayout = function() {
      var a = d(this.element),
        b = this.size && a;
      return b && a.innerWidth !== this.size.innerWidth
    }, g.prototype.addItems = function(a) {
      var b = this._itemize(a);
      return b.length && (this.items = this.items.concat(b)), b
    }, g.prototype.appended = function(a) {
      var b = this.addItems(a);
      b.length && (this.layoutItems(b, !0), this.reveal(b))
    }, g.prototype.prepended = function(a) {
      var b = this._itemize(a);
      if (b.length) {
        var c = this.items.slice(0);
        this.items = b.concat(c), this._resetLayout(), this._manageStamps(), this.layoutItems(b, !0), this.reveal(b), this.layoutItems(c)
      }
    }, g.prototype.reveal = function(a) {
      this._emitCompleteOnItems("reveal", a);
      for (var b = a && a.length, c = 0; b && b > c; c++) {
        var d = a[c];
        d.reveal()
      }
    }, g.prototype.hide = function(a) {
      this._emitCompleteOnItems("hide", a);
      for (var b = a && a.length, c = 0; b && b > c; c++) {
        var d = a[c];
        d.hide()
      }
    }, g.prototype.revealItemElements = function(a) {
      var b = this.getItems(a);
      this.reveal(b)
    }, g.prototype.hideItemElements = function(a) {
      var b = this.getItems(a);
      this.hide(b)
    }, g.prototype.getItem = function(a) {
      for (var b = 0, c = this.items.length; c > b; b++) {
        var d = this.items[b];
        if (d.element === a) return d
      }
    }, g.prototype.getItems = function(a) {
      a = e.makeArray(a);
      for (var b = [], c = 0, d = a.length; d > c; c++) {
        var f = a[c],
          g = this.getItem(f);
        g && b.push(g)
      }
      return b
    }, g.prototype.remove = function(a) {
      var b = this.getItems(a);
      if (this._emitCompleteOnItems("remove", b), b && b.length)
        for (var c = 0, d = b.length; d > c; c++) {
          var f = b[c];
          f.remove(), e.removeFrom(this.items, f)
        }
    }, g.prototype.destroy = function() {
      var a = this.element.style;
      a.height = "", a.position = "", a.width = "";
      for (var b = 0, c = this.items.length; c > b; b++) {
        var d = this.items[b];
        d.destroy()
      }
      this.unbindResize();
      var e = this.element.outlayerGUID;
      delete l[e], delete this.element.outlayerGUID, i && i.removeData(this.element, this.constructor.namespace)
    }, g.data = function(a) {
      a = e.getQueryElement(a);
      var b = a && a.outlayerGUID;
      return b && l[b]
    }, g.create = function(a, b) {
      function c() {
        g.apply(this, arguments)
      }
      return Object.create ? c.prototype = Object.create(g.prototype) : e.extend(c.prototype, g.prototype), c.prototype.constructor = c, c.defaults = e.extend({}, g.defaults), e.extend(c.defaults, b), c.prototype.settings = {}, c.namespace = a, c.data = g.data, c.Item = function() {
        f.apply(this, arguments)
      }, c.Item.prototype = new f, e.htmlInit(c, a), i && i.bridget && i.bridget(a, c), c
    }, g.Item = f, g
  }),
  function(a, b) {
    "function" == typeof define && define.amd ? define(["outlayer/outlayer", "get-size/get-size", "fizzy-ui-utils/utils"], b) : "object" == typeof exports ? module.exports = b(require("outlayer"), require("get-size"), require("fizzy-ui-utils")) : a.Masonry = b(a.Outlayer, a.getSize, a.fizzyUIUtils)
  }(window, function(a, b, c) {
    var d = a.create("masonry");
    return d.prototype._resetLayout = function() {
      this.getSize(), this._getMeasurement("columnWidth", "outerWidth"), this._getMeasurement("gutter", "outerWidth"), this.measureColumns();
      var a = this.cols;
      for (this.colYs = []; a--;) this.colYs.push(0);
      this.maxY = 0
    }, d.prototype.measureColumns = function() {
      if (this.getContainerWidth(), !this.columnWidth) {
        var a = this.items[0],
          c = a && a.element;
        this.columnWidth = c && b(c).outerWidth || this.containerWidth
      }
      var d = this.columnWidth += this.gutter,
        e = this.containerWidth + this.gutter,
        f = e / d,
        g = d - e % d,
        h = g && 1 > g ? "round" : "floor";
      f = Math[h](f), this.cols = Math.max(f, 1)
    }, d.prototype.getContainerWidth = function() {
      var a = this.options.isFitWidth ? this.element.parentNode : this.element,
        c = b(a);
      this.containerWidth = c && c.innerWidth
    }, d.prototype._getItemLayoutPosition = function(a) {
      a.getSize();
      var b = a.size.outerWidth % this.columnWidth,
        d = b && 1 > b ? "round" : "ceil",
        e = Math[d](a.size.outerWidth / this.columnWidth);
      e = Math.min(e, this.cols);
      for (var f = this._getColGroup(e), g = Math.min.apply(Math, f), h = c.indexOf(f, g), i = {
          x: this.columnWidth * h,
          y: g
        }, j = g + a.size.outerHeight, k = this.cols + 1 - f.length, l = 0; k > l; l++) this.colYs[h + l] = j;
      return i
    }, d.prototype._getColGroup = function(a) {
      if (2 > a) return this.colYs;
      for (var b = [], c = this.cols + 1 - a, d = 0; c > d; d++) {
        var e = this.colYs.slice(d, d + a);
        b[d] = Math.max.apply(Math, e)
      }
      return b
    }, d.prototype._manageStamp = function(a) {
      var c = b(a),
        d = this._getElementOffset(a),
        e = this.options.isOriginLeft ? d.left : d.right,
        f = e + c.outerWidth,
        g = Math.floor(e / this.columnWidth);
      g = Math.max(0, g);
      var h = Math.floor(f / this.columnWidth);
      h -= f % this.columnWidth ? 0 : 1, h = Math.min(this.cols - 1, h);
      for (var i = (this.options.isOriginTop ? d.top : d.bottom) + c.outerHeight, j = g; h >= j; j++) this.colYs[j] = Math.max(i, this.colYs[j])
    }, d.prototype._getContainerSize = function() {
      this.maxY = Math.max.apply(Math, this.colYs);
      var a = {
        height: this.maxY
      };
      return this.options.isFitWidth && (a.width = this._getContainerFitWidth()), a
    }, d.prototype._getContainerFitWidth = function() {
      for (var a = 0, b = this.cols; --b && 0 === this.colYs[b];) a++;
      return (this.cols - a) * this.columnWidth - this.gutter
    }, d.prototype.needsResizeLayout = function() {
      var a = this.containerWidth;
      return this.getContainerWidth(), a !== this.containerWidth
    }, d
  });;
(function($) {
  var o = $({});
  $.subscribe = function() {
    o.on.apply(o, arguments);
  };
  $.unsubscribe = function() {
    o.off.apply(o, arguments);
  };
  $.publish = function() {
    o.trigger.apply(o, arguments);
  };
}(jQuery));;
(function($) {
  var $event = $.event,
    $special, dummy = {
      _: 0
    },
    frame = 0,
    wasResized, animRunning;
  $special = $event.special.throttledresize = {
    setup: function() {
      $(this).on("resize", $special.handler);
    },
    teardown: function() {
      $(this).off("resize", $special.handler);
    },
    handler: function(event, execAsap) {
      var context = this,
        args = arguments;
      wasResized = true;
      if (!animRunning) {
        setInterval(function() {
          frame++;
          if (frame > $special.threshold && wasResized || execAsap) {
            event.type = "throttledresize";
            $event.dispatch.apply(context, args);
            wasResized = false;
            frame = 0;
          }
          if (frame > 9) {
            $(dummy).stop();
            animRunning = false;
            frame = 0;
          }
        }, 30);
        animRunning = true;
      }
    },
    threshold: 0
  };
})(jQuery);;
/*!
 * jQuery replaceText - v1.1 - 11/21/2009
 * http://benalman.com/projects/jquery-replacetext-plugin/
 *
 * Copyright (c) 2009 "Cowboy" Ben Alman
 * Dual licensed under the MIT and GPL licenses.
 * http://benalman.com/about/license/
 */
(function($) {
  '$:nomunge';
  $.fn.replaceText = function(search, replace, text_only) {
    return this.each(function() {
      var node = this.firstChild,
        val, new_val, remove = [];
      if (node) {
        do {
          if (node.nodeType === 3) {
            val = node.nodeValue;
            new_val = val.replace(search, replace);
            if (new_val !== val) {
              if (!text_only && /</.test(new_val)) {
                $(node).before(new_val);
                remove.push(node);
              } else {
                node.nodeValue = new_val;
              }
            }
          }
        } while (node = node.nextSibling);
      }
      remove.length && $(remove).remove();
    });
  };
})(jQuery);;
